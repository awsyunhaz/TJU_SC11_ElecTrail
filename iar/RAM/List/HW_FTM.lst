###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        10/Apr/2016  21:40:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\lib\LPLD\HW\HW_FTM.c
#    Command line =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\lib\LPLD\HW\HW_FTM.c
#        -D LPLD_K60 -lCN
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\
#        -lB
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\
#        -o
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\app\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\HW_FTM.lst
#    Object file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\Obj\HW_FTM.o
#
###############################################################################

C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\lib\LPLD\HW\HW_FTM.c
      1          /**
      2           * @file HW_FTM.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTM底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_FTM.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          FTM_ISR_CALLBACK FTM_ISR[3];
   \                     FTM_ISR:
   \   00000000                      DS8 12
     27          
     28          static uint8 LPLD_FTM_PWM_Init(FTM_InitTypeDef);
     29          static uint8 LPLD_FTM_IC_Init(FTM_InitTypeDef);
     30          static uint8 LPLD_FTM_QD_Init(FTM_InitTypeDef);
     31          static uint8 LPLD_FTM_DEC_Init(FTM_InitTypeDef);
     32          static uint8 LPLD_FTM_PinInit(FTM_Type *, FtmChnEnum_Type, PortPinsEnum_Type);
     33          static uint8 LPLD_FTM_PinDeinit(FTM_Type *, FtmChnEnum_Type);
     34          
     35          
     36          /*
     37           * LPLD_FTM_Init
     38           * FTM模块通用初始化，可初始化为PWM、输入捕获、正交解码、双边捕获模式
     39           *
     40           * 参数:
     41           *    ftm_init_structure--FTM初始化结构体，
     42           *                        具体定义见FTM_InitTypeDef
     43           *
     44           * 输出:
     45           *    0--配置错误
     46           *    1--配置成功
     47           */

   \                                 In section .text, align 2, keep-with-next
     48          uint8 LPLD_FTM_Init(FTM_InitTypeDef ftm_init_structure)
     49          {
   \                     LPLD_FTM_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
     50            uint8 result, i;
     51            //参数检查
     52            ASSERT( ftm_init_structure.FTM_Mode & 
     53                   (FTM_MODE_PWM|FTM_MODE_IC|FTM_MODE_QD|FTM_MODE_DEC));  //判断模式选择
     54            
     55            // 使能FTM时钟模块
     56            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \   00000006   0x9906             LDR      R1,[SP, #+24]
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_2  ;; 0x40038000
   \   0000000C   0x4291             CMP      R1,R2
   \   0000000E   0xD116             BNE.N    ??LPLD_FTM_Init_0
     57            {
     58              i=0; 
   \   00000010   0x2400             MOVS     R4,#+0
     59              SIM->SCGC6 |= SIM_SCGC6_FTM0_MASK;
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \   0000001C   0x.... 0x....      LDR.W    R2,??DataTable8_3  ;; 0x4004803c
   \   00000020   0x6011             STR      R1,[R2, #+0]
     60            }
     61            else if(ftm_init_structure.FTM_Ftmx == FTM1)
     62            {
     63              i=1;
     64              SIM->SCGC6 |= SIM_SCGC6_FTM1_MASK;
     65            }
     66            else if(ftm_init_structure.FTM_Ftmx == FTM2)
     67            {
     68              i=2;
     69              SIM->SCGC3 |= SIM_SCGC3_FTM2_MASK;
     70            }
     71            else
     72            {
     73              return 0;
     74            }
     75            
     76            if(ftm_init_structure.FTM_Mode & FTM_MODE_PWM)
   \                     ??LPLD_FTM_Init_1: (+1)
   \   00000022   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   00000026   0x07C9             LSLS     R1,R1,#+31
   \   00000028   0xD529             BPL.N    ??LPLD_FTM_Init_2
     77            {
     78              result = LPLD_FTM_PWM_Init(ftm_init_structure);
   \   0000002A   0xA906             ADD      R1,SP,#+24
   \   0000002C   0xB084             SUB      SP,SP,#+16
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x221C             MOVS     R2,#+28
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000036   0xBC0F             POP      {R0-R3}
   \   00000038   0x.... 0x....      BL       LPLD_FTM_PWM_Init
   \   0000003C   0xE048             B.N      ??LPLD_FTM_Init_3
     79            }
   \                     ??LPLD_FTM_Init_0: (+1)
   \   0000003E   0x9906             LDR      R1,[SP, #+24]
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable8_4  ;; 0x40039000
   \   00000044   0x4291             CMP      R1,R2
   \   00000046   0xD109             BNE.N    ??LPLD_FTM_Init_4
   \   00000048   0x2401             MOVS     R4,#+1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable8_3  ;; 0x4004803c
   \   00000058   0x6011             STR      R1,[R2, #+0]
   \   0000005A   0xE7E2             B.N      ??LPLD_FTM_Init_1
   \                     ??LPLD_FTM_Init_4: (+1)
   \   0000005C   0x9906             LDR      R1,[SP, #+24]
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable8_5  ;; 0x400b8000
   \   00000062   0x4291             CMP      R1,R2
   \   00000064   0xD109             BNE.N    ??LPLD_FTM_Init_5
   \   00000066   0x2402             MOVS     R4,#+2
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048030
   \   0000006C   0x6809             LDR      R1,[R1, #+0]
   \   0000006E   0xF051 0x7180      ORRS     R1,R1,#0x1000000
   \   00000072   0x.... 0x....      LDR.W    R2,??DataTable8_6  ;; 0x40048030
   \   00000076   0x6011             STR      R1,[R2, #+0]
   \   00000078   0xE7D3             B.N      ??LPLD_FTM_Init_1
   \                     ??LPLD_FTM_Init_5: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xE03F             B.N      ??LPLD_FTM_Init_6
     80            else if(ftm_init_structure.FTM_Mode & FTM_MODE_IC)
   \                     ??LPLD_FTM_Init_2: (+1)
   \   0000007E   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   00000082   0x0789             LSLS     R1,R1,#+30
   \   00000084   0xD509             BPL.N    ??LPLD_FTM_Init_7
     81            {
     82              result = LPLD_FTM_IC_Init(ftm_init_structure);
   \   00000086   0xA906             ADD      R1,SP,#+24
   \   00000088   0xB084             SUB      SP,SP,#+16
   \   0000008A   0x4668             MOV      R0,SP
   \   0000008C   0x221C             MOVS     R2,#+28
   \   0000008E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000092   0xBC0F             POP      {R0-R3}
   \   00000094   0x.... 0x....      BL       LPLD_FTM_IC_Init
   \   00000098   0xE01A             B.N      ??LPLD_FTM_Init_3
     83            }
     84            else if(ftm_init_structure.FTM_Mode & FTM_MODE_QD)
   \                     ??LPLD_FTM_Init_7: (+1)
   \   0000009A   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   0000009E   0x0749             LSLS     R1,R1,#+29
   \   000000A0   0xD509             BPL.N    ??LPLD_FTM_Init_8
     85            {
     86              result = LPLD_FTM_QD_Init(ftm_init_structure);
   \   000000A2   0xA906             ADD      R1,SP,#+24
   \   000000A4   0xB084             SUB      SP,SP,#+16
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x221C             MOVS     R2,#+28
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AE   0xBC0F             POP      {R0-R3}
   \   000000B0   0x.... 0x....      BL       LPLD_FTM_QD_Init
   \   000000B4   0xE00C             B.N      ??LPLD_FTM_Init_3
     87            }
     88            else if(ftm_init_structure.FTM_Mode & FTM_MODE_DEC)
   \                     ??LPLD_FTM_Init_8: (+1)
   \   000000B6   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   000000BA   0x0709             LSLS     R1,R1,#+28
   \   000000BC   0xD508             BPL.N    ??LPLD_FTM_Init_3
     89            {
     90              result = LPLD_FTM_DEC_Init(ftm_init_structure);
   \   000000BE   0xA906             ADD      R1,SP,#+24
   \   000000C0   0xB084             SUB      SP,SP,#+16
   \   000000C2   0x4668             MOV      R0,SP
   \   000000C4   0x221C             MOVS     R2,#+28
   \   000000C6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000CA   0xBC0F             POP      {R0-R3}
   \   000000CC   0x.... 0x....      BL       LPLD_FTM_DEC_Init
     91            }
     92            
     93            if(result == 1)
   \                     ??LPLD_FTM_Init_3: (+1)
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x2801             CMP      R0,#+1
   \   000000D4   0xD112             BNE.N    ??LPLD_FTM_Init_9
     94            {    
     95              //判断是否开启溢出中断
     96              if(ftm_init_structure.FTM_Isr!=NULL)
   \   000000D6   0x990C             LDR      R1,[SP, #+48]
   \   000000D8   0x2900             CMP      R1,#+0
   \   000000DA   0xD00F             BEQ.N    ??LPLD_FTM_Init_9
     97              {      
     98                FTM_ISR[i] = ftm_init_structure.FTM_Isr;
   \   000000DC   0x990C             LDR      R1,[SP, #+48]
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable8_7
   \   000000E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E4   0xF842 0x1024      STR      R1,[R2, R4, LSL #+2]
     99                if(ftm_init_structure.FTM_ToiEnable == TRUE)
   \   000000E8   0xF89D 0x102C      LDRB     R1,[SP, #+44]
   \   000000EC   0x2901             CMP      R1,#+1
   \   000000EE   0xD105             BNE.N    ??LPLD_FTM_Init_9
    100                {
    101                  ftm_init_structure.FTM_Ftmx->SC |= FTM_SC_TOIE_MASK;
   \   000000F0   0x9906             LDR      R1,[SP, #+24]
   \   000000F2   0x6809             LDR      R1,[R1, #+0]
   \   000000F4   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   000000F8   0x9A06             LDR      R2,[SP, #+24]
   \   000000FA   0x6011             STR      R1,[R2, #+0]
    102                }
    103              }
    104            }
    105            
    106            return result;
   \                     ??LPLD_FTM_Init_9: (+1)
   \   000000FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_FTM_Init_6: (+1)
   \   000000FE   0xB004             ADD      SP,SP,#+16
   \   00000100   0xBC10             POP      {R4}
   \   00000102   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    107          }
    108          
    109          /*
    110           * LPLD_FTM_Deinit
    111           * FTM模块通用反初始化
    112           *
    113           * 参数:
    114           *    ftm_init_structure--FTM初始化结构体，
    115           *                        具体定义见FTM_InitTypeDef
    116           *
    117           * 输出:
    118           *    0--配置错误
    119           *    1--配置成功
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          uint8 LPLD_FTM_Deinit(FTM_InitTypeDef ftm_init_structure)
    122          {
   \                     LPLD_FTM_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5E0             PUSH     {R5-R7,LR}
    123            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \   00000004   0x9804             LDR      R0,[SP, #+16]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_2  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD113             BNE.N    ??LPLD_FTM_Deinit_0
    124            {
    125              SIM->SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    126            }
    127            else if(ftm_init_structure.FTM_Ftmx == FTM1)
    128            {
    129              SIM->SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
    130            }
    131            else if(ftm_init_structure.FTM_Ftmx == FTM2)
    132            {
    133              SIM->SCGC3 &= ~SIM_SCGC3_FTM2_MASK;
    134            }
    135            else
    136            {
    137              return 0;
    138            }
    139            
    140            return LPLD_FTM_DisableIrq(ftm_init_structure);
   \                     ??LPLD_FTM_Deinit_1: (+1)
   \   0000001E   0xA904             ADD      R1,SP,#+16
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x221C             MOVS     R2,#+28
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_FTM_DisableIrq
   \                     ??LPLD_FTM_Deinit_2: (+1)
   \   00000030   0xBC0E             POP      {R1-R3}
   \   00000032   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_Deinit_0: (+1)
   \   00000036   0x9804             LDR      R0,[SP, #+16]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40039000
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD108             BNE.N    ??LPLD_FTM_Deinit_3
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   \   00000050   0xE7E5             B.N      ??LPLD_FTM_Deinit_1
   \                     ??LPLD_FTM_Deinit_3: (+1)
   \   00000052   0x9804             LDR      R0,[SP, #+16]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable8_5  ;; 0x400b8000
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD108             BNE.N    ??LPLD_FTM_Deinit_4
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x40048030
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8_6  ;; 0x40048030
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0xE7D7             B.N      ??LPLD_FTM_Deinit_1
   \                     ??LPLD_FTM_Deinit_4: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE7DE             B.N      ??LPLD_FTM_Deinit_2
    141          }
    142          
    143          /*
    144           * LPLD_FTM_PWM_Enable
    145           * FTM模块PWM模式输出使能，配置输出通道、占空比、指定对应的引脚、对齐方式
    146           *
    147           * 参数:
    148           *    ftmx--FTMx模块号
    149           *      |__FTM0          --FTM0
    150           *      |__FTM1          --FTM1
    151           *      |__FTM2          --FTM2
    152           *    chn--PWM输出通道
    153           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    154           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    155           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    156           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    157           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    158           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    159           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    160           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    161           *    duty--PWM输出占空比
    162           *      |__0~10000--占空比0.00%~100.00%
    163           *    pin--FTMx通道对应的引脚
    164           *      FTM0
    165           *       FTM_Ch0-PTA3\PTC1
    166           *       FTM_Ch1-PTA4\PTC2
    167           *       FTM_Ch2-PTA5\PTC3
    168           *       FTM_Ch3-PTA6\PTC4
    169           *       FTM_Ch4-PTA7\PTD4
    170           *       FTM_Ch5-PTA0\PTD5
    171           *       FTM_Ch6-PTA1\PTD6
    172           *       FTM_Ch7-PTA2\PTD7
    173           *      FTM1
    174           *       FTM_Ch0-PTA8\PTA12\PTB0
    175           *       FTM_Ch1-PTA9\PTA13\PTB1
    176           *      FTM2
    177           *       FTM_Ch0-PTA10\PTB18
    178           *       FTM_Ch1-PTA11\PTB19
    179           *    align--脉冲对齐方式
    180           *      |__ALIGN_LEFT    --左对齐
    181           *      |__ALIGN_RIGHT   --右对齐
    182           *
    183           * 输出:
    184           *    0--配置错误
    185           *    1--配置成功
    186           */

   \                                 In section .text, align 2, keep-with-next
    187          uint8 LPLD_FTM_PWM_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty, PortPinsEnum_Type pin, uint8 align)
    188          {
   \                     LPLD_FTM_PWM_Enable: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001A             MOVS     R2,R3
    189            uint32 cv;
    190            vuint32 mod;
    191            
    192            //参数检查
    193            ASSERT( duty <= 10000 );                  //判断占空比
    194            
    195            if(!LPLD_FTM_PinInit(ftmx, chn, pin))
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LPLD_FTM_PWM_Enable_0
    196              return 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE01A             B.N      ??LPLD_FTM_PWM_Enable_1
   \                     ??LPLD_FTM_PWM_Enable_0: (+1)
   \   00000020   0x9806             LDR      R0,[SP, #+24]
    197            
    198            //如果是右对齐，100%-占空比
    199            if(align == ALIGN_RIGHT)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2824             CMP      R0,#+36
   \   00000026   0xD102             BNE.N    ??LPLD_FTM_PWM_Enable_2
    200            {
    201              duty = 10000 - duty;
   \   00000028   0xF242 0x7110      MOVW     R1,#+10000
   \   0000002C   0x1B8E             SUBS     R6,R1,R6
    202            }
    203            
    204            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    205            mod = ftmx->MOD;
   \                     ??LPLD_FTM_PWM_Enable_2: (+1)
   \   0000002E   0x68A1             LDR      R1,[R4, #+8]
   \   00000030   0x9100             STR      R1,[SP, #+0]
    206            cv = (duty*(mod-0+1)+0)/10000;
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0xFB01 0xF106      MUL      R1,R1,R6
   \   0000003A   0xF242 0x7210      MOVW     R2,#+10000
   \   0000003E   0xFBB1 0xF1F2      UDIV     R1,R1,R2
    207            
    208            // 配置FTM通道控制寄存器 
    209            // 通道模式 MSB:MSA-1X, 通道边缘选择 左对齐 ELSB:ELSA-10
    210            // 通道模式 MSB:MSA-1X, 通道边缘选择 右对齐 ELSB:ELSA-X1
    211            ftmx->CONTROLS[chn].CnSC = align;
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0xEB14 0x02C5      ADDS     R2,R4,R5, LSL #+3
   \   0000004A   0x60D0             STR      R0,[R2, #+12]
    212            // 配置FTM通道值
    213            ftmx->CONTROLS[chn].CnV  = cv;
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000052   0x6101             STR      R1,[R0, #+16]
    214            
    215            return 1;
   \   00000054   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PWM_Enable_1: (+1)
   \   00000056   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    216          }
    217          
    218          /*
    219           * LPLD_FTM_PWM_ChangeDuty
    220           * 变更FTM模块PWM模式指定通道的输出占空比
    221           *
    222           * 参数:
    223           *    ftmx--FTMx模块号
    224           *      |__FTM0          --FTM0
    225           *      |__FTM1          --FTM1
    226           *      |__FTM2          --FTM2
    227           *    chn--PWM输出通道
    228           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    229           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    230           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    231           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    232           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    233           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    234           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    235           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    236           *    duty--PWM输出占空比
    237           *      |__0~10000--占空比0.00%~100.00%
    238           *
    239           * 输出:
    240           *    0--配置错误
    241           *    1--配置成功
    242           */

   \                                 In section .text, align 2, keep-with-next
    243          uint8 LPLD_FTM_PWM_ChangeDuty(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty)
    244          {
   \                     LPLD_FTM_PWM_ChangeDuty: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    245            uint32 cv;
    246            vuint32 mod;
    247            
    248            //参数检查
    249            ASSERT( duty <= 10000 );                  //判断占空比
    250              
    251            //如果是右对齐，100%-占空比
    252            if(ftmx->CONTROLS[chn].CnSC & FTM_CnSC_ELSA_MASK)
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0xEB10 0x03C1      ADDS     R3,R0,R1, LSL #+3
   \   00000008   0x68DB             LDR      R3,[R3, #+12]
   \   0000000A   0x075B             LSLS     R3,R3,#+29
   \   0000000C   0xD502             BPL.N    ??LPLD_FTM_PWM_ChangeDuty_0
    253            {
    254              duty = 10000 - duty;
   \   0000000E   0xF242 0x7310      MOVW     R3,#+10000
   \   00000012   0x1A9A             SUBS     R2,R3,R2
    255            }
    256            
    257            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    258            mod = ftmx->MOD;
   \                     ??LPLD_FTM_PWM_ChangeDuty_0: (+1)
   \   00000014   0x6883             LDR      R3,[R0, #+8]
   \   00000016   0x9300             STR      R3,[SP, #+0]
    259            cv = (duty*(mod-0+1)+0)/10000;
   \   00000018   0x9B00             LDR      R3,[SP, #+0]
   \   0000001A   0x1C5B             ADDS     R3,R3,#+1
   \   0000001C   0x435A             MULS     R2,R3,R2
   \   0000001E   0xF242 0x7310      MOVW     R3,#+10000
   \   00000022   0xFBB2 0xF2F3      UDIV     R2,R2,R3
    260           
    261            // 配置FTM通道值
    262            ftmx->CONTROLS[chn].CnV = cv;
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   0000002C   0x6102             STR      R2,[R0, #+16]
    263            
    264            return 1;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xB001             ADD      SP,SP,#+4
   \   00000032   0x4770             BX       LR               ;; return
    265          }
    266          
    267          /*
    268           * LPLD_FTM_DisableChn
    269           * 禁用FTM模块指定通道的输出、输入
    270           *
    271           * 参数:
    272           *    ftmx--FTMx模块号
    273           *      |__FTM0          --FTM0
    274           *      |__FTM1          --FTM1
    275           *      |__FTM2          --FTM2
    276           *    chn--PWM输出通道
    277           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    278           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    279           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    280           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    281           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    282           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    283           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    284           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    285           *
    286           * 输出:
    287           *    0--配置错误
    288           *    1--配置成功
    289           */

   \                                 In section .text, align 2, keep-with-next
    290          uint8 LPLD_FTM_DisableChn(FTM_Type *ftmx, FtmChnEnum_Type chn)
    291          {
   \                     LPLD_FTM_DisableChn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    292            LPLD_FTM_PinDeinit(ftmx, chn);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       LPLD_FTM_PinDeinit
    293            ftmx->CONTROLS[chn].CnSC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000018   0x60C8             STR      R0,[R1, #+12]
    294            ftmx->CONTROLS[chn].CnV  = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000022   0x6108             STR      R0,[R1, #+16]
    295            
    296            return 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    297          }
    298          
    299          
    300          
    301          /*
    302           * LPLD_FTM_IC_Enable
    303           * FTM模块输入捕获模式输出使能，配置输入通道、指定对应的引脚、捕获边缘
    304           *
    305           * 参数:
    306           *    ftmx--FTMx模块号
    307           *      |__FTM0          --FTM0
    308           *      |__FTM1          --FTM1
    309           *      |__FTM2          --FTM2
    310           *    chn--PWM输出通道
    311           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    312           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    313           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    314           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    315           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    316           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    317           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    318           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    319           *    pin--FTMx通道对应的引脚
    320           *      FTM0
    321           *       FTM_Ch0-PTA3\PTC1
    322           *       FTM_Ch1-PTA4\PTC2
    323           *       FTM_Ch2-PTA5\PTC3
    324           *       FTM_Ch3-PTA6\PTC4
    325           *       FTM_Ch4-PTA7\PTD4
    326           *       FTM_Ch5-PTA0\PTD5
    327           *       FTM_Ch6-PTA1\PTD6
    328           *       FTM_Ch7-PTA2\PTD7
    329           *      FTM1
    330           *       FTM_Ch0-PTA8\PTA12\PTB0
    331           *       FTM_Ch1-PTA9\PTA13\PTB1
    332           *      FTM2
    333           *       FTM_Ch0-PTA10\PTB18
    334           *       FTM_Ch1-PTA11\PTB19
    335           *    capture_edge--捕获边缘设置
    336           *      |__CAPTURE_RI    --上升沿捕获
    337           *      |__CAPTURE_FA    --下降沿捕获
    338           *      |__CAPTURE_RIFA  --上升下降沿捕获
    339           *
    340           * 输出:
    341           *    0--配置错误
    342           *    1--配置成功
    343           */

   \                                 In section .text, align 2, keep-with-next
    344          uint8 LPLD_FTM_IC_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin, uint8 capture_edge)
    345          {
   \                     LPLD_FTM_IC_Enable: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
    346            if(!LPLD_FTM_PinInit(ftmx, chn, pin))
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??LPLD_FTM_IC_Enable_0
    347              return 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE041             B.N      ??LPLD_FTM_IC_Enable_1
    348            
    349            ftmx->CONTROLS[chn].CnSC = 0x00;
   \                     ??LPLD_FTM_IC_Enable_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    350            
    351            ftmx->CONTROLS[chn].CnSC |= capture_edge;        
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   0000002C   0x68C0             LDR      R0,[R0, #+12]
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x4330             ORRS     R0,R6,R0
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000038   0x60C8             STR      R0,[R1, #+12]
    352            
    353            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_CHF_MASK);
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000040   0x68C0             LDR      R0,[R0, #+12]
   \   00000042   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   0000004C   0x60C8             STR      R0,[R1, #+12]
    354            ftmx->CONTROLS[chn].CnSC |= FTM_CnSC_CHIE_MASK;         //使能通道捕获输入中断
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000054   0x68C0             LDR      R0,[R0, #+12]
   \   00000056   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000060   0x60C8             STR      R0,[R1, #+12]
    355            
    356            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSB_MASK);
   \   00000062   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000064   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000068   0x68C0             LDR      R0,[R0, #+12]
   \   0000006A   0xF030 0x0020      BICS     R0,R0,#0x20
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000074   0x60C8             STR      R0,[R1, #+12]
    357            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSA_MASK);       //配置成Input capture模式
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000088   0x60C8             STR      R0,[R1, #+12]
    358            
    359            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_DMA_MASK);       //关闭DMA
   \   0000008A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008C   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000090   0x68C0             LDR      R0,[R0, #+12]
   \   00000092   0x0840             LSRS     R0,R0,#+1
   \   00000094   0x0040             LSLS     R0,R0,#+1
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   0000009C   0x60C8             STR      R0,[R1, #+12]
    360            
    361            return 1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_IC_Enable_1: (+1)
   \   000000A0   0xBD70             POP      {R4-R6,PC}       ;; return
    362          }
    363          
    364          /*
    365           * LPLD_FTM_IsTOF
    366           * 判断FTMx是否产生计数溢出中断标志
    367           * 
    368           * 参数:
    369           *    ftmx--FTMx模块号
    370           *      |__FTM0          --FTM0
    371           *      |__FTM1          --FTM1
    372           *      |__FTM2          --FTM2
    373           *
    374           * 输出:
    375           *    TRUE、FALSE
    376           *
    377           */

   \                                 In section .text, align 2, keep-with-next
    378          __INLINE boolean LPLD_FTM_IsTOF(FTM_Type *ftmx)
    379          {
    380            return (boolean)((ftmx->SC & FTM_SC_TOF_MASK)>>FTM_SC_TOF_SHIFT);
   \                     LPLD_FTM_IsTOF: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x4770             BX       LR               ;; return
    381          }
    382          
    383          /*
    384           * LPLD_FTM_ClearTOF
    385           * 清除FTMx计数器溢出中断标志
    386           * 
    387           * 参数:
    388           *    ftmx--FTMx模块号
    389           *      |__FTM0          --FTM0
    390           *      |__FTM1          --FTM1
    391           *      |__FTM2          --FTM2
    392           *
    393           * 输出:
    394           *    无
    395           *
    396           */

   \                                 In section .text, align 2, keep-with-next
    397          __INLINE void LPLD_FTM_ClearTOF(FTM_Type *ftmx)
    398          {
    399            ftmx->SC = ftmx->SC & ~FTM_SC_TOF_MASK;
   \                     LPLD_FTM_ClearTOF: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0xF031 0x0180      BICS     R1,R1,#0x80
   \   00000006   0x6001             STR      R1,[R0, #+0]
    400          }
   \   00000008   0x4770             BX       LR               ;; return
    401          
    402          /*
    403           * LPLD_FTM_IsCHnF
    404           * 判断通道n是否产生中断标志
    405           * 
    406           * 参数:
    407           *    ftmx--FTMx模块号
    408           *      |__FTM0          --FTM0
    409           *      |__FTM1          --FTM1
    410           *      |__FTM2          --FTM2
    411           *    chn--PWM输出通道
    412           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    413           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    414           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    415           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    416           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    417           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    418           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    419           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    420           *
    421           * 输出:
    422           *    TRUE、FALSE
    423           *
    424           */

   \                                 In section .text, align 2, keep-with-next
    425          __INLINE boolean LPLD_FTM_IsCHnF(FTM_Type *ftmx, FtmChnEnum_Type chn)
    426          {
    427            return (boolean)((ftmx->CONTROLS[chn].CnSC & FTM_CnSC_CHF_MASK)>>FTM_CnSC_CHF_SHIFT);
   \                     LPLD_FTM_IsCHnF: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000006   0x68C0             LDR      R0,[R0, #+12]
   \   00000008   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
    428          }
    429          
    430          /*
    431           * LPLD_FTM_ClearCHnF
    432           * 清除通道n中断标志
    433           * 
    434           * 参数:
    435           *    ftmx--FTMx模块号
    436           *      |__FTM0          --FTM0
    437           *      |__FTM1          --FTM1
    438           *      |__FTM2          --FTM2
    439           *    chn--PWM输出通道
    440           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    441           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    442           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    443           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    444           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    445           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    446           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    447           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    448           *
    449           * 输出:
    450           *    无
    451           *
    452           */

   \                                 In section .text, align 2, keep-with-next
    453          __INLINE void LPLD_FTM_ClearCHnF(FTM_Type *ftmx, FtmChnEnum_Type chn)
    454          {
    455            ftmx->CONTROLS[chn].CnSC = ftmx->CONTROLS[chn].CnSC & ~FTM_CnSC_CHF_MASK;
   \                     LPLD_FTM_ClearCHnF: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x02C1      ADDS     R2,R0,R1, LSL #+3
   \   00000006   0x68D2             LDR      R2,[R2, #+12]
   \   00000008   0xF032 0x0280      BICS     R2,R2,#0x80
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000012   0x60C2             STR      R2,[R0, #+12]
    456          }
   \   00000014   0x4770             BX       LR               ;; return
    457          
    458          /*
    459           * LPLD_FTM_GetChVal
    460           * 获取FTMx通道n捕获的FTMx计数值
    461           * 
    462           * 参数:
    463           *    ftmx--FTMx模块号
    464           *      |__FTM0          --FTM0
    465           *      |__FTM1          --FTM1
    466           *      |__FTM2          --FTM2
    467           *    chn--PWM输出通道
    468           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2)
    469           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2)
    470           *      |__FTM_Ch2          --FTMx通道2(FTM0)
    471           *      |__FTM_Ch3          --FTMx通道3(FTM0)
    472           *      |__FTM_Ch4          --FTMx通道4(FTM0)
    473           *      |__FTM_Ch5          --FTMx通道5(FTM0)
    474           *      |__FTM_Ch6          --FTMx通道6(FTM0)
    475           *      |__FTM_Ch7          --FTMx通道7(FTM0)
    476           *
    477           * 输出:
    478           *    0x1~0xFFFF
    479           *
    480           */

   \                                 In section .text, align 2, keep-with-next
    481          __INLINE uint16 LPLD_FTM_GetChVal(FTM_Type *ftmx, FtmChnEnum_Type chn)
    482          {
    483            return ftmx->CONTROLS[chn].CnV;    //获取相应通道捕获到的FTM计数器值
   \                     LPLD_FTM_GetChVal: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000006   0x6900             LDR      R0,[R0, #+16]
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /*
    487           * LPLD_FTM_GetClkDiv
    488           * 获取FTMx时钟分频系数
    489           * 
    490           * 参数:
    491           *    ftmx--FTMx模块号
    492           *      |__FTM0          --FTM0
    493           *      |__FTM1          --FTM1
    494           *      |__FTM2          --FTM2
    495           *
    496           * 输出:
    497           *    1、2、4、8、16、32、64、128
    498           *
    499           */

   \                                 In section .text, align 2, keep-with-next
    500          __INLINE uint8 LPLD_FTM_GetClkDiv(FTM_Type *ftmx)
    501          {
    502            return 1u<<((ftmx->SC & FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);    //获得时钟分频系数
   \                     LPLD_FTM_GetClkDiv: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000008   0xFA11 0xF000      LSLS     R0,R1,R0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
    503          }
    504          
    505          /*
    506           * LPLD_FTM_GetCounter
    507           * 获取FTMx计数器值
    508           * 
    509           * 参数:
    510           *    ftmx--FTMx模块号
    511           *      |__FTM0          --FTM0
    512           *      |__FTM1          --FTM1
    513           *      |__FTM2          --FTM2
    514           *
    515           * 输出:
    516           *    无
    517           *
    518           */

   \                                 In section .text, align 2, keep-with-next
    519          __INLINE uint16 LPLD_FTM_GetCounter(FTM_Type *ftmx)
    520          {
    521            return ftmx->CNT;        //获取FTMx计数器值
   \                     LPLD_FTM_GetCounter: (+1)
   \   00000000   0x6840             LDR      R0,[R0, #+4]
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
    522          }
    523          
    524          /*
    525           * LPLD_FTM_ClearCounter
    526           * 清空FTMx计数器
    527           * 
    528           * 参数:
    529           *    ftmx--FTMx模块号
    530           *      |__FTM0          --FTM0
    531           *      |__FTM1          --FTM1
    532           *      |__FTM2          --FTM2
    533           *
    534           * 输出:
    535           *    无
    536           *
    537           */

   \                                 In section .text, align 2, keep-with-next
    538          __INLINE void LPLD_FTM_ClearCounter(FTM_Type *ftmx)
    539          {
    540            ftmx->CNT = 0;        //清空FTMx计数器值
   \                     LPLD_FTM_ClearCounter: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6041             STR      R1,[R0, #+4]
    541          }
   \   00000004   0x4770             BX       LR               ;; return
    542          
    543          /*
    544           * LPLD_FTM_EnableIrq
    545           * 使能FTMx中断
    546           * 
    547           * 参数:
    548           *    ftm_init_structure--FTM初始化结构体，
    549           *                        具体定义见FTM_InitTypeDef
    550           *
    551           * 输出:
    552           *    0--配置错误
    553           *    1--配置成功
    554           *
    555           */

   \                                 In section .text, align 2, keep-with-next
    556          uint8 LPLD_FTM_EnableIrq(FTM_InitTypeDef ftm_init_structure)
    557          {
   \                     LPLD_FTM_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    558            uint8 i;
    559            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    560            
    561            if(ftmx == FTM0)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_2  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD108             BNE.N    ??LPLD_FTM_EnableIrq_0
    562              i=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    563            else if(ftmx == FTM1)
    564              i=1;
    565            else if(ftmx == FTM2)
    566              i=2;
    567            else
    568              return 0;
    569          
    570            enable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??LPLD_FTM_EnableIrq_1: (+1)
   \   00000010   0x303E             ADDS     R0,R0,#+62
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       NVIC_EnableIRQ
    571            
    572            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_EnableIrq_2: (+1)
   \   0000001A   0xBC02             POP      {R1}
   \   0000001C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_EnableIrq_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40039000
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD101             BNE.N    ??LPLD_FTM_EnableIrq_3
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE7F1             B.N      ??LPLD_FTM_EnableIrq_1
   \                     ??LPLD_FTM_EnableIrq_3: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable8_5  ;; 0x400b8000
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD101             BNE.N    ??LPLD_FTM_EnableIrq_4
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE7EB             B.N      ??LPLD_FTM_EnableIrq_1
   \                     ??LPLD_FTM_EnableIrq_4: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EE             B.N      ??LPLD_FTM_EnableIrq_2
    573          }
    574          
    575          /*
    576           * LPLD_FTM_DisableIrq
    577           * 禁用FTMx中断
    578           * 
    579           * 参数:
    580           *    ftm_init_structure--FTM初始化结构体，
    581           *                        具体定义见FTM_InitTypeDef
    582           *
    583           * 输出:
    584           *    0--配置错误
    585           *    1--配置成功
    586           *
    587           */

   \                                 In section .text, align 2, keep-with-next
    588          uint8 LPLD_FTM_DisableIrq(FTM_InitTypeDef ftm_init_structure)
    589          {
   \                     LPLD_FTM_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    590            uint8 i;
    591            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    592            
    593            if(ftmx == FTM0)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_2  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD108             BNE.N    ??LPLD_FTM_DisableIrq_0
    594              i=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    595            else if(ftmx == FTM1)
    596              i=1;
    597            else if(ftmx == FTM2)
    598              i=2;
    599            else
    600              return 0;
    601          
    602            disable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??LPLD_FTM_DisableIrq_1: (+1)
   \   00000010   0x303E             ADDS     R0,R0,#+62
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       NVIC_DisableIRQ
    603            
    604            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_DisableIrq_2: (+1)
   \   0000001A   0xBC02             POP      {R1}
   \   0000001C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_DisableIrq_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_4  ;; 0x40039000
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD101             BNE.N    ??LPLD_FTM_DisableIrq_3
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE7F1             B.N      ??LPLD_FTM_DisableIrq_1
   \                     ??LPLD_FTM_DisableIrq_3: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable8_5  ;; 0x400b8000
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD101             BNE.N    ??LPLD_FTM_DisableIrq_4
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE7EB             B.N      ??LPLD_FTM_DisableIrq_1
   \                     ??LPLD_FTM_DisableIrq_4: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EE             B.N      ??LPLD_FTM_DisableIrq_2
    605          }
    606          
    607          /*
    608           * LPLD_FTM_QD_Enable
    609           * FTM模块正交解码模式输入使能，配置输入通道PHA和PHB
    610           *
    611           * 参数:
    612           *    ftmx--FTMx模块号
    613           *      |__FTM1          --FTM1
    614           *      |__FTM2          --FTM2
    615           *    pha--PHA输入通道引脚
    616           *      FTM1
    617           *        PTA8\PTA12\PTB0
    618           *      FTM2
    619           *        PTA10\PTB18
    620           *    phb--PHB输入通道引脚
    621           *      FTM1
    622           *        PTA9\PTA13\PTB1
    623           *      FTM2
    624           *        PTA11\PTB19
    625           *
    626           * 输出:
    627           *    0--配置错误
    628           *    1--配置成功
    629           */

   \                                 In section .text, align 2, keep-with-next
    630          uint8 LPLD_FTM_QD_Enable(FTM_Type *ftmx, PortPinsEnum_Type pha, PortPinsEnum_Type phb)
    631          {
   \                     LPLD_FTM_QD_Enable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    632            if(!LPLD_FTM_PinInit(ftmx, FTM_PhA, pha))
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??LPLD_FTM_QD_Enable_0
    633              return 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE00A             B.N      ??LPLD_FTM_QD_Enable_1
    634            if(!LPLD_FTM_PinInit(ftmx, FTM_PhB, phb))
   \                     ??LPLD_FTM_QD_Enable_0: (+1)
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x2109             MOVS     R1,#+9
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??LPLD_FTM_QD_Enable_2
    635              return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B.N      ??LPLD_FTM_QD_Enable_1
    636            
    637            return 1;
   \                     ??LPLD_FTM_QD_Enable_2: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_QD_Enable_1: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    638          }
    639          
    640          /*
    641           * LPLD_FTM_QD_Disable
    642           * FTM模块正交解码模式输入禁用
    643           *
    644           * 参数:
    645           *    ftmx--FTMx模块号
    646           *      |__FTM1          --FTM1
    647           *      |__FTM2          --FTM2
    648           *
    649           * 输出:
    650           *    0--配置错误
    651           *    1--配置成功
    652           */

   \                                 In section .text, align 2, keep-with-next
    653          uint8 LPLD_FTM_QD_Disable(FTM_Type *ftmx)
    654          {
   \                     LPLD_FTM_QD_Disable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    655            if(!LPLD_FTM_PinDeinit(ftmx, FTM_PhA))
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       LPLD_FTM_PinDeinit
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LPLD_FTM_QD_Disable_0
    656              return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE008             B.N      ??LPLD_FTM_QD_Disable_1
    657            if(!LPLD_FTM_PinDeinit(ftmx, FTM_PhB))
   \                     ??LPLD_FTM_QD_Disable_0: (+1)
   \   00000014   0x2109             MOVS     R1,#+9
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       LPLD_FTM_PinDeinit
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD101             BNE.N    ??LPLD_FTM_QD_Disable_2
    658              return 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??LPLD_FTM_QD_Disable_1
    659            
    660            return 1;
   \                     ??LPLD_FTM_QD_Disable_2: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_QD_Disable_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    661          }
    662          
    663          /*
    664           * LPLD_FTM_PWM_Init
    665           * FTM模块PWM模式初始化，内部调用
    666           */

   \                                 In section .text, align 2, keep-with-next
    667          static uint8 LPLD_FTM_PWM_Init(FTM_InitTypeDef ftm_init_structure)
    668          {
   \                     LPLD_FTM_PWM_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5F0             PUSH     {R4-R7,LR}
    669            uint32 bus_clk_hz;
    670            uint32 mod, mod2;
    671            uint8 ps;
    672            uint32 freq = ftm_init_structure.FTM_PwmFreq;
   \   00000004   0x9807             LDR      R0,[SP, #+28]
    673            uint32 dt_en = ftm_init_structure.FTM_PwmDeadtimeCfg;
   \   00000006   0x9908             LDR      R1,[SP, #+32]
    674            uint8 dt_div = ftm_init_structure.FTM_PwmDeadtimeDiv;
   \   00000008   0xF89D 0x2024      LDRB     R2,[SP, #+36]
    675            uint8 dt_val = ftm_init_structure.FTM_PwmDeadtimeVal;
   \   0000000C   0xF89D 0x3025      LDRB     R3,[SP, #+37]
    676            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000010   0x9C05             LDR      R4,[SP, #+20]
    677            
    678            //参数检查
    679            ASSERT( freq );                  //判断频率
    680            ASSERT( dt_val<=63 );            //判断死区插入值
    681            
    682            bus_clk_hz = g_bus_clock;
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable12
   \   00000016   0x682D             LDR      R5,[R5, #+0]
    683            
    684            if(freq>bus_clk_hz) return 0;
   \   00000018   0x4285             CMP      R5,R0
   \   0000001A   0xD201             BCS.N    ??LPLD_FTM_PWM_Init_0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE06A             B.N      ??LPLD_FTM_PWM_Init_1
    685            
    686            if((mod=bus_clk_hz/(freq*128)) < 0xFFFFu)
   \                     ??LPLD_FTM_PWM_Init_0: (+1)
   \   00000020   0x2680             MOVS     R6,#+128
   \   00000022   0xFB06 0xF600      MUL      R6,R6,R0
   \   00000026   0xFBB5 0xFCF6      UDIV     R12,R5,R6
   \   0000002A   0xF64F 0x76FF      MOVW     R6,#+65535
   \   0000002E   0x45B4             CMP      R12,R6
   \   00000030   0xD260             BCS.N    ??LPLD_FTM_PWM_Init_2
    687            {
    688              ps = 7;
   \   00000032   0x2607             MOVS     R6,#+7
    689              mod2=mod;
   \   00000034   0x4667             MOV      R7,R12
    690              if((mod=bus_clk_hz/(freq*64)) < 0xFFFFu)
   \   00000036   0xF05F 0x0C40      MOVS     R12,#+64
   \   0000003A   0xFB0C 0xFC00      MUL      R12,R12,R0
   \   0000003E   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   00000042   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   00000046   0x45F4             CMP      R12,LR
   \   00000048   0xD23B             BCS.N    ??LPLD_FTM_PWM_Init_3
    691              {
    692                ps = 6;  
   \   0000004A   0x2606             MOVS     R6,#+6
    693                mod2=mod;  
   \   0000004C   0x4667             MOV      R7,R12
    694                if((mod=bus_clk_hz/(freq*32)) < 0xFFFFu)
   \   0000004E   0xEA5F 0x1C40      LSLS     R12,R0,#+5
   \   00000052   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   00000056   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   0000005A   0x45F4             CMP      R12,LR
   \   0000005C   0xD231             BCS.N    ??LPLD_FTM_PWM_Init_3
    695                {
    696                  ps = 5;  
   \   0000005E   0x2605             MOVS     R6,#+5
    697                  mod2=mod;
   \   00000060   0x4667             MOV      R7,R12
    698                  if((mod=bus_clk_hz/(freq*16)) < 0xFFFFu)
   \   00000062   0xEA5F 0x1C00      LSLS     R12,R0,#+4
   \   00000066   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   0000006A   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   0000006E   0x45F4             CMP      R12,LR
   \   00000070   0xD227             BCS.N    ??LPLD_FTM_PWM_Init_3
    699                  {
    700                    ps = 4;  
   \   00000072   0x2604             MOVS     R6,#+4
    701                    mod2=mod;   
   \   00000074   0x4667             MOV      R7,R12
    702                    if((mod=bus_clk_hz/(freq*8)) < 0xFFFFu)
   \   00000076   0xEA5F 0x0CC0      LSLS     R12,R0,#+3
   \   0000007A   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   0000007E   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   00000082   0x45F4             CMP      R12,LR
   \   00000084   0xD21D             BCS.N    ??LPLD_FTM_PWM_Init_3
    703                    {
    704                      ps = 3;
   \   00000086   0x2603             MOVS     R6,#+3
    705                      mod2=mod;
   \   00000088   0x4667             MOV      R7,R12
    706                      if((mod=bus_clk_hz/(freq*4)) < 0xFFFFu)
   \   0000008A   0xEA5F 0x0C80      LSLS     R12,R0,#+2
   \   0000008E   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   00000092   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   00000096   0x45F4             CMP      R12,LR
   \   00000098   0xD213             BCS.N    ??LPLD_FTM_PWM_Init_3
    707                      {
    708                        ps = 2;
   \   0000009A   0x2602             MOVS     R6,#+2
    709                        mod2=mod;
   \   0000009C   0x4667             MOV      R7,R12
    710                        if((mod=bus_clk_hz/(freq*2)) < 0xFFFFu)
   \   0000009E   0xEA5F 0x0C40      LSLS     R12,R0,#+1
   \   000000A2   0xFBB5 0xFCFC      UDIV     R12,R5,R12
   \   000000A6   0xF64F 0x7EFF      MOVW     LR,#+65535
   \   000000AA   0x45F4             CMP      R12,LR
   \   000000AC   0xD209             BCS.N    ??LPLD_FTM_PWM_Init_3
    711                        {
    712                          ps = 1;
   \   000000AE   0x2601             MOVS     R6,#+1
    713                          mod2=mod;
   \   000000B0   0x4667             MOV      R7,R12
    714                          if((mod=bus_clk_hz/(freq*1)) < 0xFFFFu)
   \   000000B2   0xFBB5 0xFCF0      UDIV     R12,R5,R0
   \   000000B6   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000BA   0x4584             CMP      R12,R0
   \   000000BC   0xD201             BCS.N    ??LPLD_FTM_PWM_Init_3
    715                          {
    716                            ps = 0;
   \   000000BE   0x2600             MOVS     R6,#+0
    717                            mod2=mod;
   \   000000C0   0x4667             MOV      R7,R12
    718                          }
    719                        }
    720                      }
    721                    }
    722                  }  
    723                }
    724              }
    725            }
    726            else
    727            {
    728              return 0;
    729            }
    730            
    731            ftmx->SC = 0;
   \                     ??LPLD_FTM_PWM_Init_3: (+1)
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x6020             STR      R0,[R4, #+0]
    732            
    733            // 设置PWM周期及占空比
    734            //    PWM周期 = (MOD-CNTIN+1)*FTM时钟周期 :
    735            // 配置FTM计数初始值
    736            ftmx->CNT = 0;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x6060             STR      R0,[R4, #+4]
    737            ftmx->CNTIN = 0;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x64E0             STR      R0,[R4, #+76]
    738            // 配置FTM计数MOD值
    739            ftmx->MOD = mod2;
   \   000000CE   0x60A7             STR      R7,[R4, #+8]
    740            
    741            ftmx->DEADTIME = FTM_DEADTIME_DTPS(dt_div) | FTM_DEADTIME_DTVAL(dt_val);
   \   000000D0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000D2   0x0190             LSLS     R0,R2,#+6
   \   000000D4   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   000000D8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000DA   0xF013 0x023F      ANDS     R2,R3,#0x3F
   \   000000DE   0x4310             ORRS     R0,R2,R0
   \   000000E0   0x66A0             STR      R0,[R4, #+104]
    742            ftmx->COMBINE = dt_en;        //使能死区
   \   000000E2   0x6661             STR      R1,[R4, #+100]
    743            
    744            // 配置FTM控制寄存器
    745            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:8
    746            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    747            ftmx->SC = FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   000000E4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000E6   0xF016 0x0007      ANDS     R0,R6,#0x7
   \   000000EA   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000EE   0x6020             STR      R0,[R4, #+0]
    748            
    749            return 1;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0xE000             B.N      ??LPLD_FTM_PWM_Init_1
   \                     ??LPLD_FTM_PWM_Init_2: (+1)
   \   000000F4   0x2000             MOVS     R0,#+0
   \                     ??LPLD_FTM_PWM_Init_1: (+1)
   \   000000F6   0xBCF0             POP      {R4-R7}
   \   000000F8   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    750          }
    751          
    752          /*
    753           * LPLD_FTM_IC_Init
    754           * FTM模块输入捕获模式初始化，内部调用
    755           */

   \                                 In section .text, align 2, keep-with-next
    756          static uint8 LPLD_FTM_IC_Init(FTM_InitTypeDef ftm_init_structure)
    757          {
   \                     LPLD_FTM_IC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
    758            uint8 i;
    759            uint8 ps = ftm_init_structure.FTM_ClkDiv;
   \   00000002   0xF89D 0x2013      LDRB     R2,[SP, #+19]
    760            FTM_ISR_CALLBACK isr_func = ftm_init_structure.FTM_Isr;
   \   00000006   0x9806             LDR      R0,[SP, #+24]
    761            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000008   0x9900             LDR      R1,[SP, #+0]
    762            
    763            //参数检查
    764            ASSERT( ps <= 7);             //时钟分频系数
    765            
    766            ftmx->CONF=FTM_CONF_BDMMODE(0x3);
   \   0000000A   0x23C0             MOVS     R3,#+192
   \   0000000C   0xF8C1 0x3084      STR      R3,[R1, #+132]
    767            
    768            ftmx->SC = 0;
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x600B             STR      R3,[R1, #+0]
    769            
    770            ftmx->CNT = 0;
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x604B             STR      R3,[R1, #+4]
    771            ftmx->CNTIN = 0;
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x64CB             STR      R3,[R1, #+76]
    772            ftmx->MOD = 0;                           
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x608B             STR      R3,[R1, #+8]
    773            ftmx->QDCTRL = (~FTM_QDCTRL_QUADEN_MASK); //关闭正交解码
   \   00000020   0xF07F 0x0301      MVNS     R3,#+1
   \   00000024   0xF8C1 0x3080      STR      R3,[R1, #+128]
    774            ftmx->FILTER = 0x00;                      //关过虑器
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x678B             STR      R3,[R1, #+120]
    775            
    776            // 配置FTM控制寄存器
    777            // 将FTM Counter配置成Free Counter
    778            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:PS
    779            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    780            ftmx->SC |= FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   0000002C   0x680B             LDR      R3,[R1, #+0]
   \   0000002E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000030   0xF012 0x0207      ANDS     R2,R2,#0x7
   \   00000034   0xF052 0x0208      ORRS     R2,R2,#0x8
   \   00000038   0x431A             ORRS     R2,R2,R3
   \   0000003A   0x600A             STR      R2,[R1, #+0]
    781            //ftmx->SC |= FTM_SC_TOIE_MASK;             //使能计数溢出中断
    782            ftmx->SC &= (~FTM_SC_CPWMS_MASK);         //FTM加计数
   \   0000003C   0x680A             LDR      R2,[R1, #+0]
   \   0000003E   0xF032 0x0220      BICS     R2,R2,#0x20
   \   00000042   0x600A             STR      R2,[R1, #+0]
    783          
    784            //设置中断函数入口地址并开启中断
    785            if(isr_func!=NULL)
   \   00000044   0x0002             MOVS     R2,R0
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD009             BEQ.N    ??LPLD_FTM_IC_Init_0
    786            {
    787              if(ftmx == FTM0)
   \   0000004A   0x.... 0x....      LDR.W    R2,??DataTable8_2  ;; 0x40038000
   \   0000004E   0x4291             CMP      R1,R2
   \   00000050   0xD108             BNE.N    ??LPLD_FTM_IC_Init_1
    788                i=0;
   \   00000052   0x2100             MOVS     R1,#+0
    789              else if(ftmx == FTM1)
    790                i=1;
    791              else if(ftmx == FTM2)
    792                i=2;
    793              else
    794                return 0;
    795              FTM_ISR[i] = isr_func;
   \                     ??LPLD_FTM_IC_Init_2: (+1)
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable8_7
   \   00000058   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
    796            }
    797          
    798            return 1;
   \                     ??LPLD_FTM_IC_Init_0: (+1)
   \   0000005E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_IC_Init_3: (+1)
   \   00000060   0xB004             ADD      SP,SP,#+16
   \   00000062   0x4770             BX       LR               ;; return
   \                     ??LPLD_FTM_IC_Init_1: (+1)
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable8_4  ;; 0x40039000
   \   00000068   0x4291             CMP      R1,R2
   \   0000006A   0xD101             BNE.N    ??LPLD_FTM_IC_Init_4
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0xE7F1             B.N      ??LPLD_FTM_IC_Init_2
   \                     ??LPLD_FTM_IC_Init_4: (+1)
   \   00000070   0x.... 0x....      LDR.W    R2,??DataTable8_5  ;; 0x400b8000
   \   00000074   0x4291             CMP      R1,R2
   \   00000076   0xD101             BNE.N    ??LPLD_FTM_IC_Init_5
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0xE7EB             B.N      ??LPLD_FTM_IC_Init_2
   \                     ??LPLD_FTM_IC_Init_5: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xE7EF             B.N      ??LPLD_FTM_IC_Init_3
    799          }
    800          
    801          /*
    802           * LPLD_FTM_PinInit
    803           * 初始化通道n指定引脚的FTM复用功能，内部调用
    804           */

   \                                 In section .text, align 2, keep-with-next
    805          static uint8 LPLD_FTM_PinInit(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin)
    806          { 
    807            //根据ftmx使能相应pin的ftm功能
    808            if(ftmx == FTM0)
   \                     LPLD_FTM_PinInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R3,??DataTable12_1  ;; 0x40038000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xF040 0x8106      BNE.W    ??LPLD_FTM_PinInit_0
    809            {
    810              switch(chn)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00F             BEQ.N    ??LPLD_FTM_PinInit_1
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD04A             BEQ.N    ??LPLD_FTM_PinInit_2
   \   00000014   0xD32B             BCC.N    ??LPLD_FTM_PinInit_3
   \   00000016   0x2904             CMP      R1,#+4
   \   00000018   0xF000 0x8083      BEQ.W    ??LPLD_FTM_PinInit_4
   \   0000001C   0xD363             BCC.N    ??LPLD_FTM_PinInit_5
   \   0000001E   0x2906             CMP      R1,#+6
   \   00000020   0xF000 0x80BB      BEQ.W    ??LPLD_FTM_PinInit_6
   \   00000024   0xF0C0 0x809B      BCC.W    ??LPLD_FTM_PinInit_7
   \   00000028   0x2907             CMP      R1,#+7
   \   0000002A   0xF000 0x80D4      BEQ.W    ??LPLD_FTM_PinInit_8
   \   0000002E   0xE0F0             B.N      ??LPLD_FTM_PinInit_9
    811              {
    812              case FTM_Ch0:
    813                if(pin == PTA3)
   \                     ??LPLD_FTM_PinInit_1: (+1)
   \   00000030   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000032   0x2A03             CMP      R2,#+3
   \   00000034   0xD10B             BNE.N    ??LPLD_FTM_PinInit_10
    814                  PORTA->PCR[3] = PORTA->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x4004900c
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000040   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable12_2  ;; 0x4004900c
   \   00000048   0x6008             STR      R0,[R1, #+0]
    815                else if(pin == PTC1)
    816                  PORTC->PCR[1] = PORTC->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    817                else
    818                  return 0;
    819                break;
    820              case FTM_Ch1:
    821                if(pin == PTA4)
    822                  PORTA->PCR[4] = PORTA->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    823                else if(pin == PTC2)
    824                  PORTC->PCR[2] = PORTC->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    825                else
    826                  return 0;
    827                break;
    828              case FTM_Ch2:
    829                if(pin == PTA5)
    830                  PORTA->PCR[5] = PORTA->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    831                else if(pin == PTC3)
    832                  PORTC->PCR[3] = PORTC->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    833                else
    834                  return 0;
    835                break;
    836              case FTM_Ch3:
    837                if(pin == PTA6)
    838                  PORTA->PCR[6] = PORTA->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    839                else if(pin == PTC4)
    840                  PORTC->PCR[4] = PORTC->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    841                else
    842                  return 0;
    843                break;
    844              case FTM_Ch4:
    845                if(pin == PTA7)
    846                  PORTA->PCR[7] = PORTA->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    847                else if(pin == PTD4)
    848                  PORTD->PCR[4] = PORTD->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    849                else
    850                  return 0;
    851                break;
    852              case FTM_Ch5:
    853                if(pin == PTA0)
    854                  PORTA->PCR[0] = PORTA->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    855                else if(pin == PTD5)
    856                  PORTD->PCR[5] = PORTD->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    857                else
    858                  return 0;
    859                break;
    860              case FTM_Ch6:
    861                if(pin == PTA1)
    862                  PORTA->PCR[1] = PORTA->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    863                else if(pin == PTD6)
    864                  PORTD->PCR[6] = PORTD->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    865                else
    866                  return 0;
    867                break;
    868              case FTM_Ch7:
    869                if(pin == PTA2)
    870                  PORTA->PCR[2] = PORTA->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    871                else if(pin == PTD7)
    872                  PORTD->PCR[7] = PORTD->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    873                else
    874                  return 0;
    875                break;
    876              default:
    877                return 0;     
    878              }
    879            }
    880            else if(ftmx == FTM1)
    881            {
    882              switch(chn)
    883              {
    884              case FTM_Ch0:
    885                if(pin == PTA8)
    886                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    887                else if(pin == PTA12)
    888                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    889                else if(pin == PTB0)
    890                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    891                else
    892                  return 0;
    893                break;
    894              case FTM_Ch1:
    895                if(pin == PTA9)
    896                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    897                else if(pin == PTA13)
    898                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    899                else if(pin == PTB1)
    900                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    901                else
    902                  return 0;
    903                break;
    904              case FTM_PhA:
    905                if(pin == PTA8)
    906                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    907                else if(pin == PTA12)
    908                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
    909                else if(pin == PTB0)
    910                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
    911                else
    912                  return 0;
    913                break;
    914              case FTM_PhB:
    915                if(pin == PTA9)
    916                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    917                else if(pin == PTA13)
    918                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
    919                else if(pin == PTB1)
    920                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
    921                else
    922                  return 0;
    923              default:
    924                return 0;   
    925              }
    926            }
    927            else if(ftmx == FTM2)
    928            {
    929              switch(chn)
    930              {
    931              case FTM_Ch0:
    932                if(pin == PTA10)
    933                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    934                else if(pin == PTB18)
    935                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    936                else
    937                  return 0;
    938                break;
    939              case FTM_Ch1:
    940                if(pin == PTA11)
    941                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    942                else if(pin == PTB19)
    943                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    944                else
    945                  return 0;
    946                break;
    947              case FTM_PhA:
    948                if(pin == PTA10)
    949                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    950                else if(pin == PTB18)
    951                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
    952                else
    953                  return 0;
    954                break;
    955              case FTM_PhB:
    956                if(pin == PTA11)
    957                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    958                else if(pin == PTB19)
    959                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
    960                else
    961                  return 0;
    962                break;
    963              default:
    964                return 0;   
    965              }
    966            }
    967            else
    968            {
    969              return 0;
    970            }
    971            return 1;
   \                     ??LPLD_FTM_PinInit_11: (+1)
   \                     ??LPLD_FTM_PinInit_12: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PinInit_13: (+1)
   \   0000004C   0x4770             BX       LR               ;; return
   \                     ??LPLD_FTM_PinInit_10: (+1)
   \   0000004E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000050   0x2A41             CMP      R2,#+65
   \   00000052   0xD10A             BNE.N    ??LPLD_FTM_PinInit_14
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x4004b004
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000005E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable12_3  ;; 0x4004b004
   \   00000066   0x6008             STR      R0,[R1, #+0]
   \   00000068   0xE7EF             B.N      ??LPLD_FTM_PinInit_11
   \                     ??LPLD_FTM_PinInit_14: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE7EE             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_3: (+1)
   \   0000006E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0x2A04             CMP      R2,#+4
   \   00000072   0xD10A             BNE.N    ??LPLD_FTM_PinInit_15
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40049010
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000007E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x40049010
   \   00000086   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_16: (+1)
   \   00000088   0xE7DF             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_15: (+1)
   \   0000008A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008C   0x2A42             CMP      R2,#+66
   \   0000008E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_17
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x4004b008
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000009A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0x4004b008
   \   000000A2   0x6008             STR      R0,[R1, #+0]
   \   000000A4   0xE7F0             B.N      ??LPLD_FTM_PinInit_16
   \                     ??LPLD_FTM_PinInit_17: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xE7D0             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_2: (+1)
   \   000000AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AC   0x2A05             CMP      R2,#+5
   \   000000AE   0xD10A             BNE.N    ??LPLD_FTM_PinInit_18
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x40049014
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000BA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0x40049014
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_19: (+1)
   \   000000C4   0xE7C1             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_18: (+1)
   \   000000C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000C8   0x2A43             CMP      R2,#+67
   \   000000CA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_20
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x4004b00c
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000D6   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable12_7  ;; 0x4004b00c
   \   000000DE   0x6008             STR      R0,[R1, #+0]
   \   000000E0   0xE7F0             B.N      ??LPLD_FTM_PinInit_19
   \                     ??LPLD_FTM_PinInit_20: (+1)
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xE7B2             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_5: (+1)
   \   000000E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000E8   0x2A06             CMP      R2,#+6
   \   000000EA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_21
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable12_8  ;; 0x40049018
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000F6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable12_8  ;; 0x40049018
   \   000000FE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_22: (+1)
   \   00000100   0xE7A3             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_21: (+1)
   \   00000102   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000104   0x2A44             CMP      R2,#+68
   \   00000106   0xD10A             BNE.N    ??LPLD_FTM_PinInit_23
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable12_9  ;; 0x4004b010
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000112   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable12_9  ;; 0x4004b010
   \   0000011A   0x6008             STR      R0,[R1, #+0]
   \   0000011C   0xE7F0             B.N      ??LPLD_FTM_PinInit_22
   \                     ??LPLD_FTM_PinInit_23: (+1)
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xE794             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_4: (+1)
   \   00000122   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000124   0x2A07             CMP      R2,#+7
   \   00000126   0xD10A             BNE.N    ??LPLD_FTM_PinInit_24
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable12_10  ;; 0x4004901c
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000132   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable12_10  ;; 0x4004901c
   \   0000013A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_25: (+1)
   \   0000013C   0xE785             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_24: (+1)
   \   0000013E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000140   0x2A64             CMP      R2,#+100
   \   00000142   0xD10A             BNE.N    ??LPLD_FTM_PinInit_26
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable12_11  ;; 0x4004c010
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000014E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable12_11  ;; 0x4004c010
   \   00000156   0x6008             STR      R0,[R1, #+0]
   \   00000158   0xE7F0             B.N      ??LPLD_FTM_PinInit_25
   \                     ??LPLD_FTM_PinInit_26: (+1)
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0xE776             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_7: (+1)
   \   0000015E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000160   0x2A00             CMP      R2,#+0
   \   00000162   0xD10A             BNE.N    ??LPLD_FTM_PinInit_27
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable12_12  ;; 0x40049000
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000016E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable12_12  ;; 0x40049000
   \   00000176   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_28: (+1)
   \   00000178   0xE767             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_27: (+1)
   \   0000017A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000017C   0x2A65             CMP      R2,#+101
   \   0000017E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_29
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable12_13  ;; 0x4004c014
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000018A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable12_13  ;; 0x4004c014
   \   00000192   0x6008             STR      R0,[R1, #+0]
   \   00000194   0xE7F0             B.N      ??LPLD_FTM_PinInit_28
   \                     ??LPLD_FTM_PinInit_29: (+1)
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0xE758             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_6: (+1)
   \   0000019A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000019C   0x2A01             CMP      R2,#+1
   \   0000019E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_30
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable12_14  ;; 0x40049004
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001AA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable12_14  ;; 0x40049004
   \   000001B2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_31: (+1)
   \   000001B4   0xE749             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_30: (+1)
   \   000001B6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001B8   0x2A66             CMP      R2,#+102
   \   000001BA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_32
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable12_15  ;; 0x4004c018
   \   000001C0   0x6800             LDR      R0,[R0, #+0]
   \   000001C2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001C6   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable12_15  ;; 0x4004c018
   \   000001CE   0x6008             STR      R0,[R1, #+0]
   \   000001D0   0xE7F0             B.N      ??LPLD_FTM_PinInit_31
   \                     ??LPLD_FTM_PinInit_32: (+1)
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0xE73A             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_8: (+1)
   \   000001D6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001D8   0x2A02             CMP      R2,#+2
   \   000001DA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_33
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable12_16  ;; 0x40049008
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001E6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable12_16  ;; 0x40049008
   \   000001EE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_34: (+1)
   \   000001F0   0xE72B             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_33: (+1)
   \   000001F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001F4   0x2A67             CMP      R2,#+103
   \   000001F6   0xD10A             BNE.N    ??LPLD_FTM_PinInit_35
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable12_17  ;; 0x4004c01c
   \   000001FC   0x6800             LDR      R0,[R0, #+0]
   \   000001FE   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000202   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable12_17  ;; 0x4004c01c
   \   0000020A   0x6008             STR      R0,[R1, #+0]
   \   0000020C   0xE7F0             B.N      ??LPLD_FTM_PinInit_34
   \                     ??LPLD_FTM_PinInit_35: (+1)
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0xE71C             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_9: (+1)
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0xE71A             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_0: (+1)
   \   00000216   0x.... 0x....      LDR.W    R3,??DataTable12_18  ;; 0x40039000
   \   0000021A   0x4298             CMP      R0,R3
   \   0000021C   0xF040 0x80B8      BNE.W    ??LPLD_FTM_PinInit_36
   \   00000220   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000222   0x2900             CMP      R1,#+0
   \   00000224   0xD007             BEQ.N    ??LPLD_FTM_PinInit_37
   \   00000226   0x2901             CMP      R1,#+1
   \   00000228   0xD031             BEQ.N    ??LPLD_FTM_PinInit_38
   \   0000022A   0x2908             CMP      R1,#+8
   \   0000022C   0xD05B             BEQ.N    ??LPLD_FTM_PinInit_39
   \   0000022E   0x2909             CMP      R1,#+9
   \   00000230   0xF000 0x8083      BEQ.W    ??LPLD_FTM_PinInit_40
   \   00000234   0xE08E             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_37: (+1)
   \   00000236   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000238   0x2A08             CMP      R2,#+8
   \   0000023A   0xD10A             BNE.N    ??LPLD_FTM_PinInit_42
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable12_19  ;; 0x40049020
   \   00000240   0x6800             LDR      R0,[R0, #+0]
   \   00000242   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000246   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000024A   0x.... 0x....      LDR.W    R1,??DataTable12_19  ;; 0x40049020
   \   0000024E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_43: (+1)
   \   00000250   0xE6FB             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_42: (+1)
   \   00000252   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000254   0x2A0C             CMP      R2,#+12
   \   00000256   0xD10A             BNE.N    ??LPLD_FTM_PinInit_44
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable12_20  ;; 0x40049030
   \   0000025C   0x6800             LDR      R0,[R0, #+0]
   \   0000025E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000262   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable12_20  ;; 0x40049030
   \   0000026A   0x6008             STR      R0,[R1, #+0]
   \   0000026C   0xE7F0             B.N      ??LPLD_FTM_PinInit_43
   \                     ??LPLD_FTM_PinInit_44: (+1)
   \   0000026E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000270   0x2A20             CMP      R2,#+32
   \   00000272   0xD10A             BNE.N    ??LPLD_FTM_PinInit_45
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable12_21  ;; 0x4004a000
   \   00000278   0x6800             LDR      R0,[R0, #+0]
   \   0000027A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000027E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable12_21  ;; 0x4004a000
   \   00000286   0x6008             STR      R0,[R1, #+0]
   \   00000288   0xE7E2             B.N      ??LPLD_FTM_PinInit_43
   \                     ??LPLD_FTM_PinInit_45: (+1)
   \   0000028A   0x2000             MOVS     R0,#+0
   \   0000028C   0xE6DE             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_38: (+1)
   \   0000028E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000290   0x2A09             CMP      R2,#+9
   \   00000292   0xD10A             BNE.N    ??LPLD_FTM_PinInit_46
   \   00000294   0x.... 0x....      LDR.W    R0,??DataTable12_22  ;; 0x40049024
   \   00000298   0x6800             LDR      R0,[R0, #+0]
   \   0000029A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000029E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002A2   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40049024
   \   000002A6   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_47: (+1)
   \   000002A8   0xE6CF             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_46: (+1)
   \   000002AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002AC   0x2A0D             CMP      R2,#+13
   \   000002AE   0xD10A             BNE.N    ??LPLD_FTM_PinInit_48
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable12_23  ;; 0x40049034
   \   000002B4   0x6800             LDR      R0,[R0, #+0]
   \   000002B6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002BA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable12_23  ;; 0x40049034
   \   000002C2   0x6008             STR      R0,[R1, #+0]
   \   000002C4   0xE7F0             B.N      ??LPLD_FTM_PinInit_47
   \                     ??LPLD_FTM_PinInit_48: (+1)
   \   000002C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002C8   0x2A21             CMP      R2,#+33
   \   000002CA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_49
   \   000002CC   0x.... 0x....      LDR.W    R0,??DataTable12_24  ;; 0x4004a004
   \   000002D0   0x6800             LDR      R0,[R0, #+0]
   \   000002D2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002D6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002DA   0x.... 0x....      LDR.W    R1,??DataTable12_24  ;; 0x4004a004
   \   000002DE   0x6008             STR      R0,[R1, #+0]
   \   000002E0   0xE7E2             B.N      ??LPLD_FTM_PinInit_47
   \                     ??LPLD_FTM_PinInit_49: (+1)
   \   000002E2   0x2000             MOVS     R0,#+0
   \   000002E4   0xE6B2             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_39: (+1)
   \   000002E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002E8   0x2A08             CMP      R2,#+8
   \   000002EA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_50
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable12_19  ;; 0x40049020
   \   000002F0   0x6800             LDR      R0,[R0, #+0]
   \   000002F2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002F6   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   000002FA   0x.... 0x....      LDR.W    R1,??DataTable12_19  ;; 0x40049020
   \   000002FE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_51: (+1)
   \   00000300   0xE6A3             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_50: (+1)
   \   00000302   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000304   0x2A0C             CMP      R2,#+12
   \   00000306   0xD108             BNE.N    ??LPLD_FTM_PinInit_52
   \   00000308   0x.... 0x....      LDR.W    R0,??DataTable12_20  ;; 0x40049030
   \   0000030C   0x6800             LDR      R0,[R0, #+0]
   \   0000030E   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   00000312   0x.... 0x....      LDR.W    R1,??DataTable12_20  ;; 0x40049030
   \   00000316   0x6008             STR      R0,[R1, #+0]
   \   00000318   0xE7F2             B.N      ??LPLD_FTM_PinInit_51
   \                     ??LPLD_FTM_PinInit_52: (+1)
   \   0000031A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000031C   0x2A20             CMP      R2,#+32
   \   0000031E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_53
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable12_21  ;; 0x4004a000
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000032A   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000032E   0x.... 0x....      LDR.W    R1,??DataTable12_21  ;; 0x4004a000
   \   00000332   0x6008             STR      R0,[R1, #+0]
   \   00000334   0xE7E4             B.N      ??LPLD_FTM_PinInit_51
   \                     ??LPLD_FTM_PinInit_53: (+1)
   \   00000336   0x2000             MOVS     R0,#+0
   \   00000338   0xE688             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_40: (+1)
   \   0000033A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000033C   0x2A09             CMP      R2,#+9
   \   0000033E   0xD10B             BNE.N    ??LPLD_FTM_PinInit_54
   \   00000340   0x.... 0x....      LDR.W    R0,??DataTable12_22  ;; 0x40049024
   \   00000344   0x6800             LDR      R0,[R0, #+0]
   \   00000346   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000034A   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000034E   0x.... 0x....      LDR.W    R1,??DataTable12_22  ;; 0x40049024
   \   00000352   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_41: (+1)
   \   00000354   0x2000             MOVS     R0,#+0
   \   00000356   0xE679             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_54: (+1)
   \   00000358   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000035A   0x2A0D             CMP      R2,#+13
   \   0000035C   0xD108             BNE.N    ??LPLD_FTM_PinInit_55
   \   0000035E   0x.... 0x....      LDR.W    R0,??DataTable12_23  ;; 0x40049034
   \   00000362   0x6800             LDR      R0,[R0, #+0]
   \   00000364   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   00000368   0x.... 0x....      LDR.W    R1,??DataTable12_23  ;; 0x40049034
   \   0000036C   0x6008             STR      R0,[R1, #+0]
   \   0000036E   0xE7F1             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_55: (+1)
   \   00000370   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000372   0x2A21             CMP      R2,#+33
   \   00000374   0xD10A             BNE.N    ??LPLD_FTM_PinInit_56
   \   00000376   0x.... 0x....      LDR.W    R0,??DataTable12_24  ;; 0x4004a004
   \   0000037A   0x6800             LDR      R0,[R0, #+0]
   \   0000037C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000380   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000384   0x.... 0x....      LDR.W    R1,??DataTable12_24  ;; 0x4004a004
   \   00000388   0x6008             STR      R0,[R1, #+0]
   \   0000038A   0xE7E3             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_56: (+1)
   \   0000038C   0x2000             MOVS     R0,#+0
   \   0000038E   0xE65D             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_36: (+1)
   \   00000390   0x....             LDR.N    R3,??DataTable8_5  ;; 0x400b8000
   \   00000392   0x4298             CMP      R0,R3
   \   00000394   0xF040 0x8084      BNE.W    ??LPLD_FTM_PinInit_57
   \   00000398   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000039A   0x2900             CMP      R1,#+0
   \   0000039C   0xD006             BEQ.N    ??LPLD_FTM_PinInit_58
   \   0000039E   0x2901             CMP      R1,#+1
   \   000003A0   0xD022             BEQ.N    ??LPLD_FTM_PinInit_59
   \   000003A2   0x2908             CMP      R1,#+8
   \   000003A4   0xD03E             BEQ.N    ??LPLD_FTM_PinInit_60
   \   000003A6   0x2909             CMP      R1,#+9
   \   000003A8   0xD05A             BEQ.N    ??LPLD_FTM_PinInit_61
   \   000003AA   0xE077             B.N      ??LPLD_FTM_PinInit_62
   \                     ??LPLD_FTM_PinInit_58: (+1)
   \   000003AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003AE   0x2A0A             CMP      R2,#+10
   \   000003B0   0xD10A             BNE.N    ??LPLD_FTM_PinInit_63
   \   000003B2   0x.... 0x....      LDR.W    R0,??DataTable12_25  ;; 0x40049028
   \   000003B6   0x6800             LDR      R0,[R0, #+0]
   \   000003B8   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003BC   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003C0   0x.... 0x....      LDR.W    R1,??DataTable12_25  ;; 0x40049028
   \   000003C4   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_64: (+1)
   \   000003C6   0xE640             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_63: (+1)
   \   000003C8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003CA   0x2A32             CMP      R2,#+50
   \   000003CC   0xD10A             BNE.N    ??LPLD_FTM_PinInit_65
   \   000003CE   0x.... 0x....      LDR.W    R0,??DataTable12_26  ;; 0x4004a048
   \   000003D2   0x6800             LDR      R0,[R0, #+0]
   \   000003D4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003D8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003DC   0x.... 0x....      LDR.W    R1,??DataTable12_26  ;; 0x4004a048
   \   000003E0   0x6008             STR      R0,[R1, #+0]
   \   000003E2   0xE7F0             B.N      ??LPLD_FTM_PinInit_64
   \                     ??LPLD_FTM_PinInit_65: (+1)
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0xE631             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_59: (+1)
   \   000003E8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003EA   0x2A0B             CMP      R2,#+11
   \   000003EC   0xD10A             BNE.N    ??LPLD_FTM_PinInit_66
   \   000003EE   0x.... 0x....      LDR.W    R0,??DataTable12_27  ;; 0x4004902c
   \   000003F2   0x6800             LDR      R0,[R0, #+0]
   \   000003F4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003F8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003FC   0x.... 0x....      LDR.W    R1,??DataTable12_27  ;; 0x4004902c
   \   00000400   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_67: (+1)
   \   00000402   0xE622             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_66: (+1)
   \   00000404   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000406   0x2A33             CMP      R2,#+51
   \   00000408   0xD10A             BNE.N    ??LPLD_FTM_PinInit_68
   \   0000040A   0x.... 0x....      LDR.W    R0,??DataTable12_28  ;; 0x4004a04c
   \   0000040E   0x6800             LDR      R0,[R0, #+0]
   \   00000410   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000414   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000418   0x.... 0x....      LDR.W    R1,??DataTable12_28  ;; 0x4004a04c
   \   0000041C   0x6008             STR      R0,[R1, #+0]
   \   0000041E   0xE7F0             B.N      ??LPLD_FTM_PinInit_67
   \                     ??LPLD_FTM_PinInit_68: (+1)
   \   00000420   0x2000             MOVS     R0,#+0
   \   00000422   0xE613             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_60: (+1)
   \   00000424   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000426   0x2A0A             CMP      R2,#+10
   \   00000428   0xD10A             BNE.N    ??LPLD_FTM_PinInit_69
   \   0000042A   0x.... 0x....      LDR.W    R0,??DataTable12_25  ;; 0x40049028
   \   0000042E   0x6800             LDR      R0,[R0, #+0]
   \   00000430   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000434   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000438   0x.... 0x....      LDR.W    R1,??DataTable12_25  ;; 0x40049028
   \   0000043C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_70: (+1)
   \   0000043E   0xE604             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_69: (+1)
   \   00000440   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000442   0x2A32             CMP      R2,#+50
   \   00000444   0xD10A             BNE.N    ??LPLD_FTM_PinInit_71
   \   00000446   0x.... 0x....      LDR.W    R0,??DataTable12_26  ;; 0x4004a048
   \   0000044A   0x6800             LDR      R0,[R0, #+0]
   \   0000044C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000450   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000454   0x.... 0x....      LDR.W    R1,??DataTable12_26  ;; 0x4004a048
   \   00000458   0x6008             STR      R0,[R1, #+0]
   \   0000045A   0xE7F0             B.N      ??LPLD_FTM_PinInit_70
   \                     ??LPLD_FTM_PinInit_71: (+1)
   \   0000045C   0x2000             MOVS     R0,#+0
   \   0000045E   0xE5F5             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_61: (+1)
   \   00000460   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000462   0x2A0B             CMP      R2,#+11
   \   00000464   0xD10A             BNE.N    ??LPLD_FTM_PinInit_72
   \   00000466   0x.... 0x....      LDR.W    R0,??DataTable12_27  ;; 0x4004902c
   \   0000046A   0x6800             LDR      R0,[R0, #+0]
   \   0000046C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000470   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000474   0x.... 0x....      LDR.W    R1,??DataTable12_27  ;; 0x4004902c
   \   00000478   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_73: (+1)
   \   0000047A   0xE5E6             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_72: (+1)
   \   0000047C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000047E   0x2A33             CMP      R2,#+51
   \   00000480   0xD10A             BNE.N    ??LPLD_FTM_PinInit_74
   \   00000482   0x.... 0x....      LDR.W    R0,??DataTable12_28  ;; 0x4004a04c
   \   00000486   0x6800             LDR      R0,[R0, #+0]
   \   00000488   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000048C   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000490   0x.... 0x....      LDR.W    R1,??DataTable12_28  ;; 0x4004a04c
   \   00000494   0x6008             STR      R0,[R1, #+0]
   \   00000496   0xE7F0             B.N      ??LPLD_FTM_PinInit_73
   \                     ??LPLD_FTM_PinInit_74: (+1)
   \   00000498   0x2000             MOVS     R0,#+0
   \   0000049A   0xE5D7             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_62: (+1)
   \   0000049C   0x2000             MOVS     R0,#+0
   \   0000049E   0xE5D5             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_57: (+1)
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0xE5D3             B.N      ??LPLD_FTM_PinInit_13
    972          }
    973          
    974          /*
    975           * LPLD_FTM_PinInit
    976           * 反初始化通道n指定引脚的FTM复用功能，内部调用
    977           */

   \                                 In section .text, align 2, keep-with-next
    978          static uint8 LPLD_FTM_PinDeinit(FTM_Type *ftmx, FtmChnEnum_Type chn)
    979          {
    980            //根据ftmx禁用相应pin的ftm功能，回复到默认功能
    981            if(ftmx == FTM0)
   \                     LPLD_FTM_PinDeinit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable12_1  ;; 0x40038000
   \   00000004   0x4290             CMP      R0,R2
   \   00000006   0xF040 0x80D0      BNE.W    ??LPLD_FTM_PinDeinit_0
    982            {
    983              switch(chn)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00E             BEQ.N    ??LPLD_FTM_PinDeinit_1
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD03F             BEQ.N    ??LPLD_FTM_PinDeinit_2
   \   00000014   0xD325             BCC.N    ??LPLD_FTM_PinDeinit_3
   \   00000016   0x2904             CMP      R1,#+4
   \   00000018   0xD06E             BEQ.N    ??LPLD_FTM_PinDeinit_4
   \   0000001A   0xD354             BCC.N    ??LPLD_FTM_PinDeinit_5
   \   0000001C   0x2906             CMP      R1,#+6
   \   0000001E   0xF000 0x8098      BEQ.W    ??LPLD_FTM_PinDeinit_6
   \   00000022   0xF0C0 0x8081      BCC.W    ??LPLD_FTM_PinDeinit_7
   \   00000026   0x2907             CMP      R1,#+7
   \   00000028   0xF000 0x80A8      BEQ.W    ??LPLD_FTM_PinDeinit_8
   \   0000002C   0xE0BB             B.N      ??LPLD_FTM_PinDeinit_9
    984              {
    985              case FTM_Ch0:
    986                if((PORTA->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??LPLD_FTM_PinDeinit_1: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable12_2  ;; 0x4004900c
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000038   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000003C   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_10
    987                  PORTA->PCR[3] = PORT_PCR_MUX(0); 
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable12_2  ;; 0x4004900c
   \   00000044   0x6008             STR      R0,[R1, #+0]
    988                if((PORTC->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??LPLD_FTM_PinDeinit_10: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable12_3  ;; 0x4004b004
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000050   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000054   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_11
    989                  PORTC->PCR[1] = PORT_PCR_MUX(0);
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable12_3  ;; 0x4004b004
   \   0000005C   0x6008             STR      R0,[R1, #+0]
    990                break;
    991              case FTM_Ch1:
    992                if((PORTA->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
    993                  PORTA->PCR[4] = PORT_PCR_MUX(0); 
    994                if((PORTC->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
    995                  PORTC->PCR[2] = PORT_PCR_MUX(0);
    996                break;
    997              case FTM_Ch2:
    998                if((PORTA->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
    999                  PORTA->PCR[5] = PORT_PCR_MUX(0); 
   1000                if((PORTC->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1001                  PORTC->PCR[3] = PORT_PCR_MUX(0);
   1002                break;
   1003              case FTM_Ch3:
   1004                if((PORTA->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1005                  PORTA->PCR[6] = PORT_PCR_MUX(0); 
   1006                if((PORTC->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1007                  PORTC->PCR[4] = PORT_PCR_MUX(0);
   1008                break;
   1009              case FTM_Ch4:
   1010                if((PORTA->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1011                  PORTA->PCR[7] = PORT_PCR_MUX(0); 
   1012                if((PORTD->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1013                  PORTD->PCR[4] = PORT_PCR_MUX(0);
   1014                break;
   1015              case FTM_Ch5:
   1016                if((PORTA->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1017                  PORTA->PCR[0] = PORT_PCR_MUX(0); 
   1018                if((PORTD->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1019                  PORTD->PCR[5] = PORT_PCR_MUX(0);
   1020                break;
   1021              case FTM_Ch6:
   1022                if((PORTA->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1023                  PORTA->PCR[1] = PORT_PCR_MUX(0); 
   1024                if((PORTD->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1025                  PORTD->PCR[6] = PORT_PCR_MUX(0);
   1026                break;
   1027              case FTM_Ch7:
   1028                if((PORTA->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1029                  PORTA->PCR[2] = PORT_PCR_MUX(0); 
   1030                if((PORTD->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1031                  PORTD->PCR[7] = PORT_PCR_MUX(0);      
   1032                break;
   1033              default:
   1034                return 0;     
   1035              }
   1036            }
   1037            else if(ftmx == FTM1)
   1038            {
   1039              switch(chn)
   1040              {
   1041              case FTM_Ch0:
   1042                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1043                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   1044                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1045                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   1046                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1047                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   1048                break;
   1049              case FTM_Ch1:
   1050                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1051                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   1052                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1053                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   1054                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1055                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   1056                break;
   1057              case FTM_PhA:
   1058                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1059                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   1060                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   1061                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   1062                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1063                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   1064                break;
   1065              case FTM_PhB:
   1066                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1067                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   1068                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   1069                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   1070                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1071                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   1072                break;
   1073              default:
   1074                return 0;   
   1075              }
   1076            }
   1077            else if(ftmx == FTM2)
   1078            {
   1079              switch(chn)
   1080              {
   1081              case FTM_Ch0:
   1082                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1083                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   1084                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1085                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   1086                break;
   1087              case FTM_Ch1:
   1088                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1089                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   1090                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1091                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   1092                break;
   1093              case FTM_PhA:
   1094                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1095                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   1096                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1097                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   1098                break;
   1099              case FTM_PhB:
   1100                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1101                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   1102                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1103                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   1104                break;
   1105              default:
   1106                return 0;   
   1107              }
   1108            }
   1109            else
   1110            {
   1111              return 0;
   1112            }
   1113            return 1;
   \                     ??LPLD_FTM_PinDeinit_11: (+1)
   \                     ??LPLD_FTM_PinDeinit_12: (+1)
   \   0000005E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PinDeinit_13: (+1)
   \   00000060   0x4770             BX       LR               ;; return
   \                     ??LPLD_FTM_PinDeinit_3: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable12_4  ;; 0x40049010
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000006C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000070   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_14
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable12_4  ;; 0x40049010
   \   00000078   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_14: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable12_5  ;; 0x4004b008
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000084   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000088   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_15
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable12_5  ;; 0x4004b008
   \   00000090   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_15: (+1)
   \   00000092   0xE7E4             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_2: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable12_6  ;; 0x40049014
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000009E   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000A2   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_16
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable12_6  ;; 0x40049014
   \   000000AA   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_16: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable12_7  ;; 0x4004b00c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000B6   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000BA   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_17
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable12_7  ;; 0x4004b00c
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_17: (+1)
   \   000000C4   0xE7CB             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_5: (+1)
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable12_8  ;; 0x40049018
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000D0   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000D4   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_18
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable12_8  ;; 0x40049018
   \   000000DC   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_18: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable12_9  ;; 0x4004b010
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000E8   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000EC   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_19
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable12_9  ;; 0x4004b010
   \   000000F4   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_19: (+1)
   \   000000F6   0xE7B2             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_4: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable12_10  ;; 0x4004901c
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000102   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000106   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_20
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable12_10  ;; 0x4004901c
   \   0000010E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_20: (+1)
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable12_11  ;; 0x4004c010
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000011A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000011E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_21
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x....             LDR.N    R1,??DataTable12_11  ;; 0x4004c010
   \   00000124   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_21: (+1)
   \   00000126   0xE79A             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_7: (+1)
   \   00000128   0x....             LDR.N    R0,??DataTable12_12  ;; 0x40049000
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000130   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000134   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_22
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x....             LDR.N    R1,??DataTable12_12  ;; 0x40049000
   \   0000013A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_22: (+1)
   \   0000013C   0x....             LDR.N    R0,??DataTable12_13  ;; 0x4004c014
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000144   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000148   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_23
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x....             LDR.N    R1,??DataTable12_13  ;; 0x4004c014
   \   0000014E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_23: (+1)
   \   00000150   0xE785             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_6: (+1)
   \   00000152   0x....             LDR.N    R0,??DataTable12_14  ;; 0x40049004
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000015A   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000015E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_24
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x....             LDR.N    R1,??DataTable12_14  ;; 0x40049004
   \   00000164   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_24: (+1)
   \   00000166   0x....             LDR.N    R0,??DataTable12_15  ;; 0x4004c018
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000016E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000172   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_25
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x....             LDR.N    R1,??DataTable12_15  ;; 0x4004c018
   \   00000178   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_25: (+1)
   \   0000017A   0xE770             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_8: (+1)
   \   0000017C   0x....             LDR.N    R0,??DataTable12_16  ;; 0x40049008
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000184   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000188   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_26
   \   0000018A   0x2000             MOVS     R0,#+0
   \   0000018C   0x....             LDR.N    R1,??DataTable12_16  ;; 0x40049008
   \   0000018E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_26: (+1)
   \   00000190   0x....             LDR.N    R0,??DataTable12_17  ;; 0x4004c01c
   \   00000192   0x6800             LDR      R0,[R0, #+0]
   \   00000194   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000198   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000019C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_27
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x....             LDR.N    R1,??DataTable12_17  ;; 0x4004c01c
   \   000001A2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_27: (+1)
   \   000001A4   0xE75B             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_9: (+1)
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0xE75A             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_0: (+1)
   \   000001AA   0x....             LDR.N    R2,??DataTable12_18  ;; 0x40039000
   \   000001AC   0x4290             CMP      R0,R2
   \   000001AE   0xF040 0x8088      BNE.W    ??LPLD_FTM_PinDeinit_28
   \   000001B2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B4   0x2900             CMP      R1,#+0
   \   000001B6   0xD006             BEQ.N    ??LPLD_FTM_PinDeinit_29
   \   000001B8   0x2901             CMP      R1,#+1
   \   000001BA   0xD023             BEQ.N    ??LPLD_FTM_PinDeinit_30
   \   000001BC   0x2908             CMP      R1,#+8
   \   000001BE   0xD040             BEQ.N    ??LPLD_FTM_PinDeinit_31
   \   000001C0   0x2909             CMP      R1,#+9
   \   000001C2   0xD05D             BEQ.N    ??LPLD_FTM_PinDeinit_32
   \   000001C4   0xE07B             B.N      ??LPLD_FTM_PinDeinit_33
   \                     ??LPLD_FTM_PinDeinit_29: (+1)
   \   000001C6   0x....             LDR.N    R0,??DataTable12_19  ;; 0x40049020
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001CE   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001D2   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_34
   \   000001D4   0x2000             MOVS     R0,#+0
   \   000001D6   0x....             LDR.N    R1,??DataTable12_19  ;; 0x40049020
   \   000001D8   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_34: (+1)
   \   000001DA   0x....             LDR.N    R0,??DataTable12_20  ;; 0x40049030
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001E2   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001E6   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_35
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0x....             LDR.N    R1,??DataTable12_20  ;; 0x40049030
   \   000001EC   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_35: (+1)
   \   000001EE   0x....             LDR.N    R0,??DataTable12_21  ;; 0x4004a000
   \   000001F0   0x6800             LDR      R0,[R0, #+0]
   \   000001F2   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001F6   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001FA   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_36
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0x....             LDR.N    R1,??DataTable12_21  ;; 0x4004a000
   \   00000200   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_36: (+1)
   \   00000202   0xE72C             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_30: (+1)
   \   00000204   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40049024
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000020C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000210   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_37
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x....             LDR.N    R1,??DataTable12_22  ;; 0x40049024
   \   00000216   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_37: (+1)
   \   00000218   0x....             LDR.N    R0,??DataTable12_23  ;; 0x40049034
   \   0000021A   0x6800             LDR      R0,[R0, #+0]
   \   0000021C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000220   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000224   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_38
   \   00000226   0x2000             MOVS     R0,#+0
   \   00000228   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40049034
   \   0000022A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_38: (+1)
   \   0000022C   0x....             LDR.N    R0,??DataTable12_24  ;; 0x4004a004
   \   0000022E   0x6800             LDR      R0,[R0, #+0]
   \   00000230   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000234   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000238   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_39
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4004a004
   \   0000023E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_39: (+1)
   \   00000240   0xE70D             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_31: (+1)
   \   00000242   0x....             LDR.N    R0,??DataTable12_19  ;; 0x40049020
   \   00000244   0x6800             LDR      R0,[R0, #+0]
   \   00000246   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000024A   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000024E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_40
   \   00000250   0x2000             MOVS     R0,#+0
   \   00000252   0x....             LDR.N    R1,??DataTable12_19  ;; 0x40049020
   \   00000254   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_40: (+1)
   \   00000256   0x....             LDR.N    R0,??DataTable12_20  ;; 0x40049030
   \   00000258   0x6800             LDR      R0,[R0, #+0]
   \   0000025A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000025E   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   00000262   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_41
   \   00000264   0x2000             MOVS     R0,#+0
   \   00000266   0x....             LDR.N    R1,??DataTable12_20  ;; 0x40049030
   \   00000268   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_41: (+1)
   \   0000026A   0x....             LDR.N    R0,??DataTable12_21  ;; 0x4004a000
   \   0000026C   0x6800             LDR      R0,[R0, #+0]
   \   0000026E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000272   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000276   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_42
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x....             LDR.N    R1,??DataTable12_21  ;; 0x4004a000
   \   0000027C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_42: (+1)
   \   0000027E   0xE6EE             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_32: (+1)
   \   00000280   0x....             LDR.N    R0,??DataTable12_22  ;; 0x40049024
   \   00000282   0x6800             LDR      R0,[R0, #+0]
   \   00000284   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000288   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000028C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_43
   \   0000028E   0x2000             MOVS     R0,#+0
   \   00000290   0x....             LDR.N    R1,??DataTable12_22  ;; 0x40049024
   \   00000292   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_43: (+1)
   \   00000294   0x....             LDR.N    R0,??DataTable12_23  ;; 0x40049034
   \   00000296   0x6800             LDR      R0,[R0, #+0]
   \   00000298   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000029C   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   000002A0   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_44
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x....             LDR.N    R1,??DataTable12_23  ;; 0x40049034
   \   000002A6   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_44: (+1)
   \   000002A8   0x....             LDR.N    R0,??DataTable12_24  ;; 0x4004a004
   \   000002AA   0x6800             LDR      R0,[R0, #+0]
   \   000002AC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002B0   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000002B4   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_45
   \   000002B6   0x2000             MOVS     R0,#+0
   \   000002B8   0x....             LDR.N    R1,??DataTable12_24  ;; 0x4004a004
   \   000002BA   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_45: (+1)
   \   000002BC   0xE6CF             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_33: (+1)
   \   000002BE   0x2000             MOVS     R0,#+0
   \   000002C0   0xE6CE             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_28: (+1)
   \   000002C2   0x....             LDR.N    R2,??DataTable10  ;; 0x400b8000
   \   000002C4   0x4290             CMP      R0,R2
   \   000002C6   0xD15F             BNE.N    ??LPLD_FTM_PinDeinit_46
   \   000002C8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002CA   0x2900             CMP      R1,#+0
   \   000002CC   0xD006             BEQ.N    ??LPLD_FTM_PinDeinit_47
   \   000002CE   0x2901             CMP      R1,#+1
   \   000002D0   0xD019             BEQ.N    ??LPLD_FTM_PinDeinit_48
   \   000002D2   0x2908             CMP      R1,#+8
   \   000002D4   0xD02C             BEQ.N    ??LPLD_FTM_PinDeinit_49
   \   000002D6   0x2909             CMP      R1,#+9
   \   000002D8   0xD03F             BEQ.N    ??LPLD_FTM_PinDeinit_50
   \   000002DA   0xE053             B.N      ??LPLD_FTM_PinDeinit_51
   \                     ??LPLD_FTM_PinDeinit_47: (+1)
   \   000002DC   0x....             LDR.N    R0,??DataTable12_25  ;; 0x40049028
   \   000002DE   0x6800             LDR      R0,[R0, #+0]
   \   000002E0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002E4   0xF5B0 0x7F40      CMP      R0,#+768
   \   000002E8   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_52
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40049028
   \   000002EE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_52: (+1)
   \   000002F0   0x....             LDR.N    R0,??DataTable12_26  ;; 0x4004a048
   \   000002F2   0x6800             LDR      R0,[R0, #+0]
   \   000002F4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002F8   0xF5B0 0x7F40      CMP      R0,#+768
   \   000002FC   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_53
   \   000002FE   0x2000             MOVS     R0,#+0
   \   00000300   0x....             LDR.N    R1,??DataTable12_26  ;; 0x4004a048
   \   00000302   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_53: (+1)
   \   00000304   0xE6AB             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_48: (+1)
   \   00000306   0x....             LDR.N    R0,??DataTable12_27  ;; 0x4004902c
   \   00000308   0x6800             LDR      R0,[R0, #+0]
   \   0000030A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000030E   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000312   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_54
   \   00000314   0x2000             MOVS     R0,#+0
   \   00000316   0x....             LDR.N    R1,??DataTable12_27  ;; 0x4004902c
   \   00000318   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_54: (+1)
   \   0000031A   0x....             LDR.N    R0,??DataTable12_28  ;; 0x4004a04c
   \   0000031C   0x6800             LDR      R0,[R0, #+0]
   \   0000031E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000322   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000326   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_55
   \   00000328   0x2000             MOVS     R0,#+0
   \   0000032A   0x....             LDR.N    R1,??DataTable12_28  ;; 0x4004a04c
   \   0000032C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_55: (+1)
   \   0000032E   0xE696             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_49: (+1)
   \   00000330   0x....             LDR.N    R0,??DataTable12_25  ;; 0x40049028
   \   00000332   0x6800             LDR      R0,[R0, #+0]
   \   00000334   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000338   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000033C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_56
   \   0000033E   0x2000             MOVS     R0,#+0
   \   00000340   0x....             LDR.N    R1,??DataTable12_25  ;; 0x40049028
   \   00000342   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_56: (+1)
   \   00000344   0x....             LDR.N    R0,??DataTable12_26  ;; 0x4004a048
   \   00000346   0x6800             LDR      R0,[R0, #+0]
   \   00000348   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000034C   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000350   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_57
   \   00000352   0x2000             MOVS     R0,#+0
   \   00000354   0x....             LDR.N    R1,??DataTable12_26  ;; 0x4004a048
   \   00000356   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_57: (+1)
   \   00000358   0xE681             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_50: (+1)
   \   0000035A   0x....             LDR.N    R0,??DataTable12_27  ;; 0x4004902c
   \   0000035C   0x6800             LDR      R0,[R0, #+0]
   \   0000035E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000362   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000366   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_58
   \   00000368   0x2000             MOVS     R0,#+0
   \   0000036A   0x....             LDR.N    R1,??DataTable12_27  ;; 0x4004902c
   \   0000036C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_58: (+1)
   \   0000036E   0x....             LDR.N    R0,??DataTable12_28  ;; 0x4004a04c
   \   00000370   0x6800             LDR      R0,[R0, #+0]
   \   00000372   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000376   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000037A   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_59
   \   0000037C   0x2000             MOVS     R0,#+0
   \   0000037E   0x....             LDR.N    R1,??DataTable12_28  ;; 0x4004a04c
   \   00000380   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_59: (+1)
   \   00000382   0xE66C             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_51: (+1)
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0xE66B             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_46: (+1)
   \   00000388   0x2000             MOVS     R0,#+0
   \   0000038A   0xE669             B.N      ??LPLD_FTM_PinDeinit_13
   1114          }
   1115          
   1116          /*
   1117           * LPLD_FTM_QD_Init
   1118           * FTM模块正交解码模式初始化，内部调用
   1119           */

   \                                 In section .text, align 2, keep-with-next
   1120          static uint8 LPLD_FTM_QD_Init(FTM_InitTypeDef ftm_init_structure)
   1121          {
   \                     LPLD_FTM_QD_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1122            uint8 mode = ftm_init_structure.FTM_QdMode;
   \   00000002   0xF89D 0x0012      LDRB     R0,[SP, #+18]
   1123            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000006   0x9900             LDR      R1,[SP, #+0]
   1124           
   1125            ftmx->MODE |= FTM_MODE_FTMEN_MASK;    //FTM2EN=1   
   \   00000008   0x6D4A             LDR      R2,[R1, #+84]
   \   0000000A   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   0000000E   0x654A             STR      R2,[R1, #+84]
   1126            
   1127            ftmx->CNTIN = 0;//FTM0计数器初始值为0  
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x64CA             STR      R2,[R1, #+76]
   1128            ftmx->CNT=0;  
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x604A             STR      R2,[R1, #+4]
   1129            ftmx->MOD = 0xFFFF;//结束值  
   \   00000018   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000001C   0x608A             STR      R2,[R1, #+8]
   1130            
   1131            ftmx->QDCTRL |= mode;     //解码模式选择
   \   0000001E   0xF8D1 0x2080      LDR      R2,[R1, #+128]
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x4310             ORRS     R0,R0,R2
   \   00000026   0xF8C1 0x0080      STR      R0,[R1, #+128]
   1132            ftmx->QDCTRL |= FTM_QDCTRL_QUADEN_MASK;       //使能正交解码模式 
   \   0000002A   0xF8D1 0x0080      LDR      R0,[R1, #+128]
   \   0000002E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000032   0xF8C1 0x0080      STR      R0,[R1, #+128]
   1133          
   1134            return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xB004             ADD      SP,SP,#+16
   \   0000003A   0x4770             BX       LR               ;; return
   1135          }
   1136          

   \                                 In section .text, align 2, keep-with-next
   1137          static uint8 LPLD_FTM_DEC_Init(FTM_InitTypeDef ftm_init_structure)
   1138          {
   \                     LPLD_FTM_DEC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1139            
   1140            return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xB004             ADD      SP,SP,#+16
   \   00000006   0x4770             BX       LR               ;; return
   1141          }
   1142          
   1143          /*
   1144           * FTM0--FTM1中断处理函数
   1145           * 与启动文件startup_K60.s中的中断向量表关联
   1146           * 用户无需修改，程序自动进入对应通道中断函数
   1147           */

   \                                 In section .text, align 2, keep-with-next
   1148          void FTM0_IRQHandler(void)
   1149          {
   \                     FTM0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1150          #if (UCOS_II > 0u)
   1151            OS_CPU_SR  cpu_sr = 0u;
   1152            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1153            OSIntEnter();
   1154            OS_EXIT_CRITICAL();
   1155          #endif
   1156            
   1157            FTM_ISR[0]();
   \   00000002   0x....             LDR.N    R0,??DataTable12_29
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
   1158            
   1159          #if (UCOS_II > 0u)
   1160            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1161          #endif
   1162          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1163          

   \                                 In section .text, align 2, keep-with-next
   1164          void FTM1_IRQHandler(void)
   1165          {
   \                     FTM1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1166          #if (UCOS_II > 0u)
   1167            OS_CPU_SR  cpu_sr = 0u;
   1168            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1169            OSIntEnter();
   1170            OS_EXIT_CRITICAL();
   1171          #endif
   1172            
   1173            FTM_ISR[1]();
   \   00000002   0x....             LDR.N    R0,??DataTable12_29
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
   1174            
   1175          #if (UCOS_II > 0u)
   1176            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1177          #endif
   1178          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1179          

   \                                 In section .text, align 2, keep-with-next
   1180          void FTM2_IRQHandler(void)
   1181          {
   \                     FTM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1182          #if (UCOS_II > 0u)
   1183            OS_CPU_SR  cpu_sr = 0u;
   1184            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1185            OSIntEnter();
   1186            OS_EXIT_CRITICAL();
   1187          #endif
   1188            
   1189            FTM_ISR[2]();
   \   00000002   0x....             LDR.N    R0,??DataTable12_29
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
   1190            
   1191          #if (UCOS_II > 0u)
   1192            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1193          #endif
   1194          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     FTM_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x4004900C         DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x40049014         DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \   00000000   0x4004901C         DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_14:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_15:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_16:
   \   00000000   0x40049008         DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_17:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_18:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_19:
   \   00000000   0x40049020         DC32     0x40049020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_20:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_21:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_22:
   \   00000000   0x40049024         DC32     0x40049024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_23:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_24:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_25:
   \   00000000   0x40049028         DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_26:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_27:
   \   00000000   0x4004902C         DC32     0x4004902c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_28:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_29:
   \   00000000   0x........         DC32     FTM_ISR

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FTM0_IRQHandler
         8   -- Indirect call
       8   FTM1_IRQHandler
         8   -- Indirect call
       8   FTM2_IRQHandler
         8   -- Indirect call
       0   LPLD_FTM_ClearCHnF
       0   LPLD_FTM_ClearCounter
       0   LPLD_FTM_ClearTOF
      16   LPLD_FTM_DEC_Init
      48   LPLD_FTM_Deinit
        32   -> LPLD_FTM_DisableIrq
        48   -> __aeabi_memcpy4
      16   LPLD_FTM_DisableChn
        16   -> LPLD_FTM_PinDeinit
      24   LPLD_FTM_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_FTM_EnableIrq
        24   -> NVIC_EnableIRQ
       0   LPLD_FTM_GetChVal
       0   LPLD_FTM_GetClkDiv
       0   LPLD_FTM_GetCounter
      16   LPLD_FTM_IC_Enable
        16   -> LPLD_FTM_PinInit
      16   LPLD_FTM_IC_Init
      56   LPLD_FTM_Init
        40   -> LPLD_FTM_DEC_Init
        40   -> LPLD_FTM_IC_Init
        40   -> LPLD_FTM_PWM_Init
        40   -> LPLD_FTM_QD_Init
        56   -> __aeabi_memcpy4
       0   LPLD_FTM_IsCHnF
       0   LPLD_FTM_IsTOF
       4   LPLD_FTM_PWM_ChangeDuty
      24   LPLD_FTM_PWM_Enable
        24   -> LPLD_FTM_PinInit
      36   LPLD_FTM_PWM_Init
       0   LPLD_FTM_PinDeinit
       0   LPLD_FTM_PinInit
       8   LPLD_FTM_QD_Disable
         8   -> LPLD_FTM_PinDeinit
      16   LPLD_FTM_QD_Enable
        16   -> LPLD_FTM_PinInit
      16   LPLD_FTM_QD_Init
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
      10  FTM0_IRQHandler
      10  FTM1_IRQHandler
      10  FTM2_IRQHandler
      12  FTM_ISR
      22  LPLD_FTM_ClearCHnF
       6  LPLD_FTM_ClearCounter
      10  LPLD_FTM_ClearTOF
       8  LPLD_FTM_DEC_Init
     114  LPLD_FTM_Deinit
      40  LPLD_FTM_DisableChn
      60  LPLD_FTM_DisableIrq
      60  LPLD_FTM_EnableIrq
      12  LPLD_FTM_GetChVal
      16  LPLD_FTM_GetClkDiv
       6  LPLD_FTM_GetCounter
     162  LPLD_FTM_IC_Enable
     128  LPLD_FTM_IC_Init
     262  LPLD_FTM_Init
      16  LPLD_FTM_IsCHnF
      10  LPLD_FTM_IsTOF
      52  LPLD_FTM_PWM_ChangeDuty
      88  LPLD_FTM_PWM_Enable
     252  LPLD_FTM_PWM_Init
     908  LPLD_FTM_PinDeinit
    1188  LPLD_FTM_PinInit
      40  LPLD_FTM_QD_Disable
      50  LPLD_FTM_QD_Enable
      60  LPLD_FTM_QD_Init
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ

 
    12 bytes in section .bss
 3 800 bytes in section .text
 
 3 800 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
