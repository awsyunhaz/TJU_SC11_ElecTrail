###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Jul/2016  19:37:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_1.c
#    Command line =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_1.c
#        -D LPLD_K60 -lCN
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -lB
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -o
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\app\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\LDC1000_1.lst
#    Object file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\LDC1000_1.o
#
###############################################################################

C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_1.c
      1          #include "common.h"
      2          #include "LDC1000.h"
      3          
      4          #define uchar uint8 
      5          #define NN  10
      6          

   \                                 In section .data, align 1
      7          uint8 rpi_max_1=10;
   \                     rpi_max_1:
   \   00000000   0x0A               DC8 10

   \                                 In section .bss, align 2
      8          uint8 proximtyData_1[2]={0};
   \                     proximtyData_1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
      9          uint8 orgVal_1[12]={0};
   \                     orgVal_1:
   \   00000000                      DS8 12
     10          

   \                                 In section .data, align 1
     11          uint8 RPMAX_1 =0x01;
   \                     RPMAX_1:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     12          uint8 RPMIN_1 =0x33;
   \                     RPMIN_1:
   \   00000000   0x33               DC8 51

   \                                 In section .data, align 1
     13          uint8 RFREQ_1 =0x9B;
   \                     RFREQ_1:
   \   00000000   0x9B               DC8 155
     14          
     15          
     16          /*!
     17           *  @brief      初始化LDC电轨传感器模块
     18           *  @param      
     19           *  @param      
     20           *  @param      
     21           *  @since      
     22           *  @note       包含SPI初始化
     23           *  Sample usage:       
     24           */

   \                                 In section .text, align 2, keep-with-next
     25          void FLOAT_delay_us(int ms)//为防止time_delay_ms();与lpt冲突编写的延时
     26          {
     27            int j1,k_1;int i1;
     28            i1=ms;
     29            for(j1=0;j1<i1;j1++)   
   \                     FLOAT_delay_us: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE003             B.N      ??FLOAT_delay_us_0
     30              for(k_1=0;k_1<8;k_1++);
   \                     ??FLOAT_delay_us_1: (+1)
   \   00000004   0x1C52             ADDS     R2,R2,#+1
   \                     ??FLOAT_delay_us_2: (+1)
   \   00000006   0x2A08             CMP      R2,#+8
   \   00000008   0xDBFC             BLT.N    ??FLOAT_delay_us_1
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \                     ??FLOAT_delay_us_0: (+1)
   \   0000000C   0x4281             CMP      R1,R0
   \   0000000E   0xDA01             BGE.N    ??FLOAT_delay_us_3
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xE7F8             B.N      ??FLOAT_delay_us_2
     31          }
   \                     ??FLOAT_delay_us_3: (+1)
   \   00000014   0x4770             BX       LR               ;; return
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void LDC1000_init_1()
     34          { 
   \                     LDC1000_init_1: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     35                   FLOAT_SPI_init();   
   \   00000002   0x.... 0x....      BL       FLOAT_SPI_init
     36                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_RPMAX, RPMAX_1);
   \   00000006   0x....             LDR.N    R0,??DataTable6
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     37                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_RPMIN, RPMIN_1);//0x14
   \   00000010   0x....             LDR.N    R0,??DataTable6_1
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     38                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_SENSORFREQ,  RFREQ_1);  //谐振频率计算方法见《浮点科技电轨传感器调试手册》
   \   0000001A   0x....             LDR.N    R0,??DataTable6_2
   \   0000001C   0x7801             LDRB     R1,[R0, #+0]
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     39                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_LDCCONFIG,   0x1F);  //0x1B  //影响数值波动
   \   00000024   0x211F             MOVS     R1,#+31
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     40                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_CLKCONFIG,   0x01);  //0x01        
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x2005             MOVS     R0,#+5
   \   00000030   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     41                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_INTCONFIG,   0x02);
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x200A             MOVS     R0,#+10
   \   00000038   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     42                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_PWRCONFIG,   0x01);
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x200B             MOVS     R0,#+11
   \   00000040   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     43                   FLOAT_Singal_SPI_Write_1(LDC1000_CMD_THRESHILSB,  0x50);
   \   00000044   0x2150             MOVS     R1,#+80
   \   00000046   0x2006             MOVS     R0,#+6
   \   00000048   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     44          	 FLOAT_Singal_SPI_Write_1(LDC1000_CMD_THRESHIMSB,  0x14);
   \   0000004C   0x2114             MOVS     R1,#+20
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     45          	 FLOAT_Singal_SPI_Write_1(LDC1000_CMD_THRESLOLSB,  0xC0);
   \   00000054   0x21C0             MOVS     R1,#+192
   \   00000056   0x2008             MOVS     R0,#+8
   \   00000058   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     46          	 FLOAT_Singal_SPI_Write_1(LDC1000_CMD_THRESLOMSB,  0x12);
   \   0000005C   0x2112             MOVS     R1,#+18
   \   0000005E   0x2009             MOVS     R0,#+9
   \   00000060   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_1
     47                   FLOAT_SPI_Read_Buf_1(LDC1000_CMD_REVID,&orgVal_1[0],12);//orgVal[]对应上面写入的值说明初始化正常
   \   00000064   0x220C             MOVS     R2,#+12
   \   00000066   0x....             LDR.N    R1,??DataTable6_3
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       FLOAT_SPI_Read_Buf_1
     48          
     49          } 
   \   0000006E   0xBD01             POP      {R0,PC}          ;; return
     50          
     51          

   \                                 In section .text, align 2, keep-with-next
     52          int ldc_read_avr_1()
     53          {
   \                     ldc_read_avr_1: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     54            unsigned long proximtyDataTEMP=0,proximtyDataSUM,proximtyDataAVE;
   \   00000002   0x2000             MOVS     R0,#+0
     55          
     56            char rpi=0, count=0;  //取rpi次平均值    
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
     57            
     58            for (rpi=0;rpi<rpi_max_1;rpi++)
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0xE011             B.N      ??ldc_read_avr_1_0
     59              {
     60          
     61                FLOAT_SPI_Read_Buf_1(LDC1000_CMD_PROXLSB,&proximtyData_1[0],2);  
   \                     ??ldc_read_avr_1_1: (+1)
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0x....             LDR.N    R1,??DataTable6_4
   \   00000012   0x2021             MOVS     R0,#+33
   \   00000014   0x.... 0x....      BL       FLOAT_SPI_Read_Buf_1
     62                proximtyDataTEMP = ((unsigned long)proximtyData_1[1]<<8) + proximtyData_1 [0];
   \   00000018   0x....             LDR.N    R0,??DataTable6_4
   \   0000001A   0x7840             LDRB     R0,[R0, #+1]
   \   0000001C   0x0200             LSLS     R0,R0,#+8
   \   0000001E   0x....             LDR.N    R1,??DataTable6_4
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0x1840             ADDS     R0,R0,R1
     63                if (proximtyDataTEMP<32767)
   \   00000024   0xF647 0x71FF      MOVW     R1,#+32767
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD201             BCS.N    ??ldc_read_avr_1_2
     64                {
     65                  proximtyDataSUM += proximtyDataTEMP;
   \   0000002C   0x1904             ADDS     R4,R0,R4
     66                  count++;
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
     67                }
     68              }
   \                     ??ldc_read_avr_1_2: (+1)
   \   00000030   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ldc_read_avr_1_0: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable6_5
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xD3E8             BCC.N    ??ldc_read_avr_1_1
     69               proximtyDataAVE = proximtyDataSUM / count;
   \   0000003C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003E   0xFBB4 0xF0F6      UDIV     R0,R4,R6
     70               proximtyDataSUM=0;
   \   00000042   0x2400             MOVS     R4,#+0
     71            
     72              return   proximtyDataAVE; 
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
     73          
     74          }
     75          
     76          

   \                                 In section .text, align 2, keep-with-next
     77          long int filter_1()
     78          {
   \                     filter_1: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
     79             char count,count1=0;
   \   00000004   0x2500             MOVS     R5,#+0
     80             long int sum=0;
   \   00000006   0x2600             MOVS     R6,#+0
     81             unsigned long value_buf[NN];
     82             
     83             
     84             for(count=0;count<NN;count++)
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xE006             B.N      ??filter_1_0
     85                value_buf[count] = ldc_read_avr_1();
   \                     ??filter_1_1: (+1)
   \   0000000C   0x.... 0x....      BL       ldc_read_avr_1
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??filter_1_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C0A             CMP      R4,#+10
   \   0000001E   0xDBF5             BLT.N    ??filter_1_1
     86           
     87          
     88             for(count=0;count<NN;count++)
   \   00000020   0x2400             MOVS     R4,#+0
   \   00000022   0xE00C             B.N      ??filter_1_2
     89             {
     90               if (value_buf[count]>0)
   \                     ??filter_1_3: (+1)
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD005             BEQ.N    ??filter_1_4
     91               {
     92                 sum += value_buf[count];
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000038   0x1986             ADDS     R6,R0,R6
     93                 count1++;
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
     94               }
     95             }
   \                     ??filter_1_4: (+1)
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \                     ??filter_1_2: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C0A             CMP      R4,#+10
   \   00000042   0xDBEF             BLT.N    ??filter_1_3
     96             
     97             return (sum/count1);
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0xFB96 0xF0F5      SDIV     R0,R6,R5
   \   0000004A   0xB00A             ADD      SP,SP,#+40
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
     98          
     99          }
    100          
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void FLOAT_SPI_init()
    103          {  
   \                     FLOAT_SPI_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    104                 
    105            GPIO(PTB0,DIR_INPUT);   //MISO1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       GPIO
    106            GPIO(PTB1,DIR_OUTPUT);  //MOSI1
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2021             MOVS     R0,#+33
   \   0000000E   0x.... 0x....      BL       GPIO
    107            GPIO(PTB2,DIR_OUTPUT);  // CSN1
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2022             MOVS     R0,#+34
   \   00000016   0x.... 0x....      BL       GPIO
    108            GPIO(PTB3,DIR_OUTPUT);  //SCK1
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2023             MOVS     R0,#+35
   \   0000001E   0x.... 0x....      BL       GPIO
    109            
    110            GPIO(PTB11,DIR_INPUT);  //MISO2
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x202B             MOVS     R0,#+43
   \   00000026   0x.... 0x....      BL       GPIO
    111            GPIO(PTB10,DIR_OUTPUT); //MOSI2
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x202A             MOVS     R0,#+42
   \   0000002E   0x.... 0x....      BL       GPIO
    112            GPIO(PTC1,DIR_OUTPUT);  // CSN2
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2041             MOVS     R0,#+65
   \   00000036   0x.... 0x....      BL       GPIO
    113            GPIO(PTC0,DIR_OUTPUT);  //SCK2
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x2040             MOVS     R0,#+64
   \   0000003E   0x.... 0x....      BL       GPIO
    114            
    115            GPIO(PTD1,DIR_INPUT);  //MISO3
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2061             MOVS     R0,#+97
   \   00000046   0x.... 0x....      BL       GPIO
    116            GPIO(PTC18,DIR_OUTPUT); //MOSI3
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2052             MOVS     R0,#+82
   \   0000004E   0x.... 0x....      BL       GPIO
    117            GPIO(PTB16,DIR_OUTPUT);  // CSN3
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x2030             MOVS     R0,#+48
   \   00000056   0x.... 0x....      BL       GPIO
    118            GPIO(PTD3,DIR_OUTPUT);  //SCK3
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x2063             MOVS     R0,#+99
   \   0000005E   0x.... 0x....      BL       GPIO
    119          
    120            PTB0_I=1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x....             LDR.N    R1,??DataTable6_6  ;; 0x43fe0a00
   \   00000066   0x6008             STR      R0,[R1, #+0]
    121            PTB1_O=1;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable6_7  ;; 0x43fe0804
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    122            PTB2_O=1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x....             LDR.N    R1,??DataTable6_8  ;; 0x43fe0808
   \   00000072   0x6008             STR      R0,[R1, #+0]
    123            PTB3_O=0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR.N    R1,??DataTable6_9  ;; 0x43fe080c
   \   00000078   0x6008             STR      R0,[R1, #+0]
    124          
    125            PTB11_I=1;
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x....             LDR.N    R1,??DataTable6_10  ;; 0x43fe0a2c
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    126            PTB10_O=1;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable6_11  ;; 0x43fe0828
   \   00000084   0x6008             STR      R0,[R1, #+0]
    127            PTC1_O=1;
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x....             LDR.N    R1,??DataTable6_12  ;; 0x43fe1004
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    128            PTC0_O=0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x....             LDR.N    R1,??DataTable6_13  ;; 0x43fe1000
   \   00000090   0x6008             STR      R0,[R1, #+0]
    129           
    130            PTD1_I=1;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x....             LDR.N    R1,??DataTable6_14  ;; 0x43fe1a04
   \   00000096   0x6008             STR      R0,[R1, #+0]
    131            PTC18_O=1;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable6_15  ;; 0x43fe1048
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    132            PTB16_O=1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x....             LDR.N    R1,??DataTable6_16  ;; 0x43fe0840
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    133            PTD3_O=0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x....             LDR.N    R1,??DataTable6_17  ;; 0x43fe180c
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    134             
    135          
    136          }
   \   000000AA   0xBD01             POP      {R0,PC}          ;; return
    137          /****************************************************************************************************
    138          * Function Name: uchar FLOAT_SPI_RW(uchar wdata)
    139          * Description  : read and write of SPI.
    140          * Arguments    : wdata
    141          * Return Value : rdata
    142          ****************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          uchar FLOAT_SPI_RW_1(uchar rwdata)
    144          {  
   \                     FLOAT_SPI_RW_1: (+1)
   \   00000000   0xB410             PUSH     {R4}
    145              
    146          	uchar spi_rw_i=0;	
   \   00000002   0x2200             MOVS     R2,#+0
    147                  uchar temp=0;
   \   00000004   0x2100             MOVS     R1,#+0
    148                  for(spi_rw_i=0;spi_rw_i<8;spi_rw_i++)   	// output 8-bit
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x001A             MOVS     R2,R3
   \   0000000A   0xE021             B.N      ??FLOAT_SPI_RW_1_0
    149             	{
    150             	        /*** prepare the write data of read before the coming of rising up******/
    151          	          if(rwdata & 0x80)
    152                              MOSI_1_H;
    153             		  else 
    154                              MOSI_1_L;
   \                     ??FLOAT_SPI_RW_1_1: (+1)
   \   0000000C   0x....             LDR.N    R3,??DataTable6_18
   \   0000000E   0x685B             LDR      R3,[R3, #+4]
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0xF033 0x0302      BICS     R3,R3,#0x2
   \   00000016   0x....             LDR.N    R4,??DataTable6_18
   \   00000018   0x6864             LDR      R4,[R4, #+4]
   \   0000001A   0x6023             STR      R3,[R4, #+0]
    155             		  rwdata<<=1;           		// shift next bit to MSB
   \                     ??FLOAT_SPI_RW_1_2: (+1)
   \   0000001C   0x0040             LSLS     R0,R0,#+1
    156                            temp<<=1;
   \   0000001E   0x0049             LSLS     R1,R1,#+1
    157          		SCK_1_L;             //Set SCK high    Rising up 
   \   00000020   0x....             LDR.N    R3,??DataTable6_18
   \   00000022   0x685B             LDR      R3,[R3, #+4]
   \   00000024   0x681B             LDR      R3,[R3, #+0]
   \   00000026   0xF033 0x0308      BICS     R3,R3,#0x8
   \   0000002A   0x....             LDR.N    R4,??DataTable6_18
   \   0000002C   0x6864             LDR      R4,[R4, #+4]
   \   0000002E   0x6023             STR      R3,[R4, #+0]
    158                         
    159             		if(MISO_1) 
   \   00000030   0x....             LDR.N    R3,??DataTable6_18
   \   00000032   0x685B             LDR      R3,[R3, #+4]
   \   00000034   0x691B             LDR      R3,[R3, #+16]
   \   00000036   0x07DB             LSLS     R3,R3,#+31
   \   00000038   0xD501             BPL.N    ??FLOAT_SPI_RW_1_3
    160                            temp|=1;
   \   0000003A   0xF051 0x0101      ORRS     R1,R1,#0x1
    161             		SCK_1_H;            //set  SCK low     Falling down
   \                     ??FLOAT_SPI_RW_1_3: (+1)
   \   0000003E   0x....             LDR.N    R3,??DataTable6_18
   \   00000040   0x685B             LDR      R3,[R3, #+4]
   \   00000042   0x681B             LDR      R3,[R3, #+0]
   \   00000044   0xF053 0x0308      ORRS     R3,R3,#0x8
   \   00000048   0x....             LDR.N    R4,??DataTable6_18
   \   0000004A   0x6864             LDR      R4,[R4, #+4]
   \   0000004C   0x6023             STR      R3,[R4, #+0]
   \   0000004E   0x1C52             ADDS     R2,R2,#+1
   \                     ??FLOAT_SPI_RW_1_0: (+1)
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x2A08             CMP      R2,#+8
   \   00000054   0xDA0A             BGE.N    ??FLOAT_SPI_RW_1_4
   \   00000056   0x0603             LSLS     R3,R0,#+24
   \   00000058   0xD5D8             BPL.N    ??FLOAT_SPI_RW_1_1
   \   0000005A   0x....             LDR.N    R3,??DataTable6_18
   \   0000005C   0x685B             LDR      R3,[R3, #+4]
   \   0000005E   0x681B             LDR      R3,[R3, #+0]
   \   00000060   0xF053 0x0302      ORRS     R3,R3,#0x2
   \   00000064   0x....             LDR.N    R4,??DataTable6_18
   \   00000066   0x6864             LDR      R4,[R4, #+4]
   \   00000068   0x6023             STR      R3,[R4, #+0]
   \   0000006A   0xE7D7             B.N      ??FLOAT_SPI_RW_1_2
    162                          
    163             	}
    164              return(temp);           		  		// return read byte
   \                     ??FLOAT_SPI_RW_1_4: (+1)
   \   0000006C   0x0008             MOVS     R0,R1
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xBC10             POP      {R4}
   \   00000072   0x4770             BX       LR               ;; return
    165              
    166           
    167          }
    168          /****************************************************************************************************
    169          * Function Name: uchar FLOAT_Singal_SPI(uchar reg,uchar wdata)
    170          * Description  : registers read and write of device.
    171          * Arguments    : commond,wdata
    172          * Return Value : rdata
    173          ****************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    174          uchar FLOAT_Singal_SPI_Read_1(uchar reg)
    175          {
   \                     FLOAT_Singal_SPI_Read_1: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    176          	uchar rdata;
    177          	
    178          	CSN_1_L;                // CSN low, initialize SPI communication...
   \   00000004   0x....             LDR.N    R0,??DataTable6_18
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000000E   0x....             LDR.N    R1,??DataTable6_18
   \   00000010   0x6849             LDR      R1,[R1, #+4]
   \   00000012   0x6008             STR      R0,[R1, #+0]
    179                 
    180                  FLOAT_delay_us(2);
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       FLOAT_delay_us
    181                   
    182                   reg=reg|0x80;//read
   \   0000001A   0xF054 0x0480      ORRS     R4,R4,#0x80
    183          	FLOAT_SPI_RW_1(reg);            // Select register to read from..
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       FLOAT_SPI_RW_1
    184                   asm("nop");
   \   00000026   0xBF00             nop
    185                   asm("nop");
   \   00000028   0xBF00             nop
    186                   asm("nop");
   \   0000002A   0xBF00             nop
    187                   asm("nop");
   \   0000002C   0xBF00             nop
    188                   asm("nop");
   \   0000002E   0xBF00             nop
    189                   asm("nop");
   \   00000030   0xBF00             nop
    190                   asm("nop");
   \   00000032   0xBF00             nop
    191                   asm("nop");
   \   00000034   0xBF00             nop
    192                   asm("nop");
   \   00000036   0xBF00             nop
    193                   asm("nop");
   \   00000038   0xBF00             nop
    194                   asm("nop");
   \   0000003A   0xBF00             nop
    195                   asm("nop");
   \   0000003C   0xBF00             nop
    196                   asm("nop");
   \   0000003E   0xBF00             nop
    197                   asm("nop");
   \   00000040   0xBF00             nop
    198                   asm("nop");
   \   00000042   0xBF00             nop
    199                   asm("nop");
   \   00000044   0xBF00             nop
    200                   asm("nop");
   \   00000046   0xBF00             nop
    201                   asm("nop");
   \   00000048   0xBF00             nop
    202                   asm("nop");
   \   0000004A   0xBF00             nop
    203                   asm("nop");
   \   0000004C   0xBF00             nop
    204                   asm("nop");
   \   0000004E   0xBF00             nop
    205                   
    206          	rdata = FLOAT_SPI_RW_1(NULL);    // ..then read registervalue
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       FLOAT_SPI_RW_1
   \   00000056   0x0004             MOVS     R4,R0
    207                 
    208                  FLOAT_delay_us(1700);
   \   00000058   0xF240 0x60A4      MOVW     R0,#+1700
   \   0000005C   0x.... 0x....      BL       FLOAT_delay_us
    209          	CSN_1_H;                // CSN high, terminate SPI communication
   \   00000060   0x....             LDR.N    R0,??DataTable6_18
   \   00000062   0x6840             LDR      R0,[R0, #+4]
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000006A   0x....             LDR.N    R1,??DataTable6_18
   \   0000006C   0x6849             LDR      R1,[R1, #+4]
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    210          	
    211          	return rdata;        // return register value
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
    212          }
    213          /****************************************************************************************************
    214          * Function Name: void FLOAT_Singal_SPI_Write(uchar reg,uchar wdata)
    215          * Description  : registers read and write of device.
    216          * Arguments    : commond,wdata
    217          * Return Value : rdata
    218          ****************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    219          void FLOAT_Singal_SPI_Write_1(uchar reg,uchar wdata)
    220          {
   \                     FLOAT_Singal_SPI_Write_1: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    221          	
    222          	CSN_1_L;                // CSN low, initialize SPI communication...
   \   00000006   0x....             LDR.N    R0,??DataTable6_18
   \   00000008   0x6840             LDR      R0,[R0, #+4]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000010   0x....             LDR.N    R1,??DataTable6_18
   \   00000012   0x6849             LDR      R1,[R1, #+4]
   \   00000014   0x6008             STR      R0,[R1, #+0]
    223                
    224                  FLOAT_delay_us(2);//2us
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       FLOAT_delay_us
    225                  reg=reg&~0x80;
   \   0000001C   0xF014 0x047F      ANDS     R4,R4,#0x7F
    226          	FLOAT_SPI_RW_1(reg);            // Select register to read from..
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       FLOAT_SPI_RW_1
    227                   asm("nop");
   \   00000028   0xBF00             nop
    228                   asm("nop");
   \   0000002A   0xBF00             nop
    229                   asm("nop");
   \   0000002C   0xBF00             nop
    230                   asm("nop");
   \   0000002E   0xBF00             nop
    231                   asm("nop");
   \   00000030   0xBF00             nop
    232                   asm("nop");
   \   00000032   0xBF00             nop
    233                   asm("nop");
   \   00000034   0xBF00             nop
    234                   asm("nop");
   \   00000036   0xBF00             nop
    235                   asm("nop");
   \   00000038   0xBF00             nop
    236                   asm("nop");
   \   0000003A   0xBF00             nop
    237                   asm("nop");
   \   0000003C   0xBF00             nop
    238                   asm("nop");
   \   0000003E   0xBF00             nop
    239                   asm("nop");
   \   00000040   0xBF00             nop
    240                   asm("nop");
   \   00000042   0xBF00             nop
    241                   asm("nop");
   \   00000044   0xBF00             nop
    242                   asm("nop");
   \   00000046   0xBF00             nop
    243                   asm("nop");
   \   00000048   0xBF00             nop
    244                   asm("nop");
   \   0000004A   0xBF00             nop
    245                   asm("nop");
   \   0000004C   0xBF00             nop
    246                   asm("nop");
   \   0000004E   0xBF00             nop
    247                   asm("nop");
   \   00000050   0xBF00             nop
    248                  
    249          	FLOAT_SPI_RW_1(wdata);    // ..then read registervalue
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       FLOAT_SPI_RW_1
    250                  FLOAT_delay_us(1700);//875us
   \   0000005A   0xF240 0x60A4      MOVW     R0,#+1700
   \   0000005E   0x.... 0x....      BL       FLOAT_delay_us
    251          	CSN_1_H;              // CSN high, terminate SPI communication
   \   00000062   0x....             LDR.N    R0,??DataTable6_18
   \   00000064   0x6840             LDR      R0,[R0, #+4]
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000006C   0x....             LDR.N    R1,??DataTable6_18
   \   0000006E   0x6849             LDR      R1,[R1, #+4]
   \   00000070   0x6008             STR      R0,[R1, #+0]
    252                 
    253          	
    254          }
   \   00000072   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    255          
    256          /****************************************************************************************************
    257          * Function Name: void FLOAT_SPI_Read_Buf(uchar reg, uchar *pBuf, uchar len)
    258          * Description  : read muche registers
    259          * Arguments    : reg,len
    260          * Return Value : *pBuf
    261          ****************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    262          void FLOAT_SPI_Read_Buf_1(uchar reg, uchar *pBuf, uchar len)
    263          {
   \                     FLOAT_SPI_Read_Buf_1: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    264          	uchar spi_rw_i;
    265          	
    266          	CSN_1_L;                   		// Set CSN low, init SPI tranaction
   \   00000006   0x....             LDR.N    R1,??DataTable6_18
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF031 0x0104      BICS     R1,R1,#0x4
   \   00000010   0x....             LDR.N    R2,??DataTable6_18
   \   00000012   0x6852             LDR      R2,[R2, #+4]
   \   00000014   0x6011             STR      R1,[R2, #+0]
    267                 
    268                  reg=reg|0x80;//read
   \   00000016   0xF050 0x0080      ORRS     R0,R0,#0x80
    269          	FLOAT_SPI_RW_1(reg);       		// Select register to write to and read status uchar
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       FLOAT_SPI_RW_1
    270          	
    271          	for(spi_rw_i=0;spi_rw_i<len;spi_rw_i++)
   \   00000020   0x2600             MOVS     R6,#+0
   \   00000022   0xE005             B.N      ??FLOAT_SPI_Read_Buf_1_0
    272                  {  
    273          	pBuf[spi_rw_i] = FLOAT_SPI_RW_1(NULL);    // 
   \                     ??FLOAT_SPI_Read_Buf_1_1: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       FLOAT_SPI_RW_1
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x5530             STRB     R0,[R6, R4]
    274          	 }
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??FLOAT_SPI_Read_Buf_1_0: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x42AE             CMP      R6,R5
   \   00000036   0xD3F5             BCC.N    ??FLOAT_SPI_Read_Buf_1_1
    275          	CSN_1_H;     
   \   00000038   0x....             LDR.N    R0,??DataTable6_18
   \   0000003A   0x6840             LDR      R0,[R0, #+4]
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000042   0x....             LDR.N    R1,??DataTable6_18
   \   00000044   0x6849             LDR      R1,[R1, #+4]
   \   00000046   0x6008             STR      R0,[R1, #+0]
    276                 
    277          
    278          }
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     RPMAX_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     RPMIN_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     RFREQ_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     orgVal_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     proximtyData_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     rpi_max_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x43FE0A00         DC32     0x43fe0a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x43FE0804         DC32     0x43fe0804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x43FE0808         DC32     0x43fe0808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x43FE080C         DC32     0x43fe080c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x43FE0A2C         DC32     0x43fe0a2c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x43FE0828         DC32     0x43fe0828

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x43FE1004         DC32     0x43fe1004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x43FE1000         DC32     0x43fe1000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x43FE1A04         DC32     0x43fe1a04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x43FE1048         DC32     0x43fe1048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x43FE0840         DC32     0x43fe0840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x43FE180C         DC32     0x43fe180c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     GPIOX

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   FLOAT_SPI_RW_1
      16   FLOAT_SPI_Read_Buf_1
        16   -> FLOAT_SPI_RW_1
       8   FLOAT_SPI_init
         8   -> GPIO
       8   FLOAT_Singal_SPI_Read_1
         8   -> FLOAT_SPI_RW_1
         8   -> FLOAT_delay_us
      16   FLOAT_Singal_SPI_Write_1
        16   -> FLOAT_SPI_RW_1
        16   -> FLOAT_delay_us
       0   FLOAT_delay_us
       8   LDC1000_init_1
         8   -> FLOAT_SPI_Read_Buf_1
         8   -> FLOAT_SPI_init
         8   -> FLOAT_Singal_SPI_Write_1
      56   filter_1
        56   -> ldc_read_avr_1
      16   ldc_read_avr_1
        16   -> FLOAT_SPI_Read_Buf_1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     116  FLOAT_SPI_RW_1
      74  FLOAT_SPI_Read_Buf_1
     172  FLOAT_SPI_init
     118  FLOAT_Singal_SPI_Read_1
     116  FLOAT_Singal_SPI_Write_1
      22  FLOAT_delay_us
     112  LDC1000_init_1
       1  RFREQ_1
       1  RPMAX_1
       1  RPMIN_1
      78  filter_1
      70  ldc_read_avr_1
      12  orgVal_1
       2  proximtyData_1
       1  rpi_max_1

 
  14 bytes in section .bss
   4 bytes in section .data
 954 bytes in section .text
 
 954 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
