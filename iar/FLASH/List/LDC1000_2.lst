###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Jul/2016  19:37:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_2.c
#    Command line =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_2.c
#        -D LPLD_K60 -lCN
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -lB
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -o
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\app\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\LDC1000_2.lst
#    Object file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\LDC1000_2.o
#
###############################################################################

C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\LDC1000_2.c
      1          #include "common.h"
      2          #include "LDC1000.h"
      3          
      4          #define uchar uint8 
      5          #define NN  10
      6          

   \                                 In section .data, align 1
      7          uint8 rpi_max_2=10;
   \                     rpi_max_2:
   \   00000000   0x0A               DC8 10

   \                                 In section .bss, align 2
      8          uint8 proximtyData_2[2]={0};
   \                     proximtyData_2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
      9          uint8 orgVal_2[12]={0};
   \                     orgVal_2:
   \   00000000                      DS8 12
     10          

   \                                 In section .data, align 1
     11          uint8 RPMAX_2 =0x01; 
   \                     RPMAX_2:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     12          uint8 RPMIN_2 =0x33;
   \                     RPMIN_2:
   \   00000000   0x33               DC8 51

   \                                 In section .data, align 1
     13          uint8 RFREQ_2 =0x9B;
   \                     RFREQ_2:
   \   00000000   0x9B               DC8 155
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void LDC1000_init_2()
     16          {  
   \                     LDC1000_init_2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     17          //         FLOAT_SPI_init();
     18                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_RPMAX, RPMAX_2);
   \   00000002   0x....             LDR.N    R0,??DataTable5
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     19                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_RPMIN, RPMIN_2);//0x14
   \   0000000C   0x....             LDR.N    R0,??DataTable5_1
   \   0000000E   0x7801             LDRB     R1,[R0, #+0]
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     20                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_SENSORFREQ,  RFREQ_2);  //谐振频率计算方法见《浮点科技电轨传感器调试手册》
   \   00000016   0x....             LDR.N    R0,??DataTable5_2
   \   00000018   0x7801             LDRB     R1,[R0, #+0]
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     21                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_LDCCONFIG,   0x1F);  //0x1B
   \   00000020   0x211F             MOVS     R1,#+31
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     22                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_CLKCONFIG,   0x01);  //0x01    
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     23                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_INTCONFIG,   0x02);
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x200A             MOVS     R0,#+10
   \   00000034   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     24                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_PWRCONFIG,   0x01);
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x200B             MOVS     R0,#+11
   \   0000003C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     25                   FLOAT_Singal_SPI_Write_2(LDC1000_CMD_THRESHILSB,  0x50);
   \   00000040   0x2150             MOVS     R1,#+80
   \   00000042   0x2006             MOVS     R0,#+6
   \   00000044   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     26          	 FLOAT_Singal_SPI_Write_2(LDC1000_CMD_THRESHIMSB,  0x14);
   \   00000048   0x2114             MOVS     R1,#+20
   \   0000004A   0x2007             MOVS     R0,#+7
   \   0000004C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     27          	 FLOAT_Singal_SPI_Write_2(LDC1000_CMD_THRESLOLSB,  0xC0);
   \   00000050   0x21C0             MOVS     R1,#+192
   \   00000052   0x2008             MOVS     R0,#+8
   \   00000054   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     28          	 FLOAT_Singal_SPI_Write_2(LDC1000_CMD_THRESLOMSB,  0x12);
   \   00000058   0x2112             MOVS     R1,#+18
   \   0000005A   0x2009             MOVS     R0,#+9
   \   0000005C   0x.... 0x....      BL       FLOAT_Singal_SPI_Write_2
     29                   FLOAT_SPI_Read_Buf_2(LDC1000_CMD_REVID,&orgVal_2[0],12);//orgVal[]对应上面写入的值说明初始化正常  
   \   00000060   0x220C             MOVS     R2,#+12
   \   00000062   0x....             LDR.N    R1,??DataTable5_3
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       FLOAT_SPI_Read_Buf_2
     30          }
   \   0000006A   0xBD01             POP      {R0,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          int ldc_read_avr_2()
     33          {
   \                     ldc_read_avr_2: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     34            unsigned long proximtyDataTEMP=0,proximtyDataSUM,proximtyDataAVE;
   \   00000002   0x2000             MOVS     R0,#+0
     35            char rpi=0, count=0;  //取rpi次平均值    
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
     36            
     37            for (rpi=0;rpi<rpi_max_2;rpi++)
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0xE010             B.N      ??ldc_read_avr_2_0
     38              {
     39          
     40                FLOAT_SPI_Read_Buf_2(LDC1000_CMD_PROXLSB,&proximtyData_2[0],2);  
   \                     ??ldc_read_avr_2_1: (+1)
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0x....             LDR.N    R1,??DataTable5_4
   \   00000012   0x2021             MOVS     R0,#+33
   \   00000014   0x.... 0x....      BL       FLOAT_SPI_Read_Buf_2
     41                proximtyDataTEMP = ((unsigned char)proximtyData_2[1]<<8) + proximtyData_2 [0]; 
   \   00000018   0x....             LDR.N    R0,??DataTable5_4
   \   0000001A   0x7840             LDRB     R0,[R0, #+1]
   \   0000001C   0x0200             LSLS     R0,R0,#+8
   \   0000001E   0x....             LDR.N    R1,??DataTable5_4
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0x1840             ADDS     R0,R0,R1
     42                if (proximtyDataTEMP<32768) 
   \   00000024   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000028   0xD201             BCS.N    ??ldc_read_avr_2_2
     43                {
     44                  proximtyDataSUM += proximtyDataTEMP;
   \   0000002A   0x1904             ADDS     R4,R0,R4
     45                  count++;
   \   0000002C   0x1C76             ADDS     R6,R6,#+1
     46                }
     47              }
   \                     ??ldc_read_avr_2_2: (+1)
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ldc_read_avr_2_0: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable5_5
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x4285             CMP      R5,R0
   \   00000038   0xD3E9             BCC.N    ??ldc_read_avr_2_1
     48               proximtyDataAVE = proximtyDataSUM /count;
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0xFBB4 0xF0F6      UDIV     R0,R4,R6
     49               proximtyDataSUM=0;
   \   00000040   0x2400             MOVS     R4,#+0
     50            
     51              return   proximtyDataAVE; 
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
     52          
     53          }
     54          
     55          

   \                                 In section .text, align 2, keep-with-next
     56          long int filter_2()
     57          {
   \                     filter_2: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
     58             char count,count1=0;
   \   00000004   0x2500             MOVS     R5,#+0
     59             long int sum=0;
   \   00000006   0x2600             MOVS     R6,#+0
     60             unsigned long value_buf[NN];
     61             
     62             
     63             for(count=0;count<NN;count++)
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xE006             B.N      ??filter_2_0
     64                value_buf[count] = ldc_read_avr_2();
   \                     ??filter_2_1: (+1)
   \   0000000C   0x.... 0x....      BL       ldc_read_avr_2
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??filter_2_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C0A             CMP      R4,#+10
   \   0000001E   0xDBF5             BLT.N    ??filter_2_1
     65           
     66          
     67             for(count=0;count<NN;count++)
   \   00000020   0x2400             MOVS     R4,#+0
   \   00000022   0xE00C             B.N      ??filter_2_2
     68             {
     69               if (value_buf[count]>0)
   \                     ??filter_2_3: (+1)
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD005             BEQ.N    ??filter_2_4
     70               {
     71                 sum += value_buf[count];
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000038   0x1986             ADDS     R6,R0,R6
     72                 count1++;
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
     73               }
     74             }
   \                     ??filter_2_4: (+1)
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \                     ??filter_2_2: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C0A             CMP      R4,#+10
   \   00000042   0xDBEF             BLT.N    ??filter_2_3
     75             
     76             return (sum/count1);
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0xFB96 0xF0F5      SDIV     R0,R6,R5
   \   0000004A   0xB00A             ADD      SP,SP,#+40
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
     77          
     78          }
     79          
     80          
     81          /****************************************************************************************************
     82          * Function Name: uchar FLOAT_SPI_RW(uchar wdata)
     83          * Description  : read and write of SPI.
     84          * Arguments    : wdata
     85          * Return Value : rdata
     86          ****************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          uchar FLOAT_SPI_RW_2(uchar rwdata)
     88          {  
   \                     FLOAT_SPI_RW_2: (+1)
   \   00000000   0xB410             PUSH     {R4}
     89              
     90          	uchar spi_rw_i=0;	
   \   00000002   0x2200             MOVS     R2,#+0
     91                  uchar temp=0;
   \   00000004   0x2100             MOVS     R1,#+0
     92                  for(spi_rw_i=0;spi_rw_i<8;spi_rw_i++)   	// output 8-bit
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x001A             MOVS     R2,R3
   \   0000000A   0xE023             B.N      ??FLOAT_SPI_RW_2_0
     93             	{
     94             	        /*** prepare the write data of read before the coming of rising up******/
     95          	          if(rwdata & 0x80)
     96                              MOSI_2_H;
     97             		  else 
     98                              MOSI_2_L;
   \                     ??FLOAT_SPI_RW_2_1: (+1)
   \   0000000C   0x....             LDR.N    R3,??DataTable5_6
   \   0000000E   0x685B             LDR      R3,[R3, #+4]
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0xF433 0x6380      BICS     R3,R3,#0x400
   \   00000016   0x....             LDR.N    R4,??DataTable5_6
   \   00000018   0x6864             LDR      R4,[R4, #+4]
   \   0000001A   0x6023             STR      R3,[R4, #+0]
     99             		  rwdata<<=1;           		// shift next bit to MSB
   \                     ??FLOAT_SPI_RW_2_2: (+1)
   \   0000001C   0x0040             LSLS     R0,R0,#+1
    100                            temp<<=1;
   \   0000001E   0x0049             LSLS     R1,R1,#+1
    101          		SCK_2_L;             //Set SCK high    Rising up 
   \   00000020   0x....             LDR.N    R3,??DataTable5_6
   \   00000022   0x689B             LDR      R3,[R3, #+8]
   \   00000024   0x681B             LDR      R3,[R3, #+0]
   \   00000026   0x085B             LSRS     R3,R3,#+1
   \   00000028   0x005B             LSLS     R3,R3,#+1
   \   0000002A   0x....             LDR.N    R4,??DataTable5_6
   \   0000002C   0x68A4             LDR      R4,[R4, #+8]
   \   0000002E   0x6023             STR      R3,[R4, #+0]
    102                         
    103             		if(MISO_2) 
   \   00000030   0x....             LDR.N    R3,??DataTable5_6
   \   00000032   0x685B             LDR      R3,[R3, #+4]
   \   00000034   0x691B             LDR      R3,[R3, #+16]
   \   00000036   0xF3C3 0x23C0      UBFX     R3,R3,#+11,#+1
   \   0000003A   0x2B00             CMP      R3,#+0
   \   0000003C   0xD001             BEQ.N    ??FLOAT_SPI_RW_2_3
    104                            temp|=1;
   \   0000003E   0xF051 0x0101      ORRS     R1,R1,#0x1
    105             		SCK_2_H;            //set  SCK low     Falling down
   \                     ??FLOAT_SPI_RW_2_3: (+1)
   \   00000042   0x....             LDR.N    R3,??DataTable5_6
   \   00000044   0x689B             LDR      R3,[R3, #+8]
   \   00000046   0x681B             LDR      R3,[R3, #+0]
   \   00000048   0xF053 0x0301      ORRS     R3,R3,#0x1
   \   0000004C   0x....             LDR.N    R4,??DataTable5_6
   \   0000004E   0x68A4             LDR      R4,[R4, #+8]
   \   00000050   0x6023             STR      R3,[R4, #+0]
   \   00000052   0x1C52             ADDS     R2,R2,#+1
   \                     ??FLOAT_SPI_RW_2_0: (+1)
   \   00000054   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000056   0x2A08             CMP      R2,#+8
   \   00000058   0xDA0A             BGE.N    ??FLOAT_SPI_RW_2_4
   \   0000005A   0x0603             LSLS     R3,R0,#+24
   \   0000005C   0xD5D6             BPL.N    ??FLOAT_SPI_RW_2_1
   \   0000005E   0x....             LDR.N    R3,??DataTable5_6
   \   00000060   0x685B             LDR      R3,[R3, #+4]
   \   00000062   0x681B             LDR      R3,[R3, #+0]
   \   00000064   0xF453 0x6380      ORRS     R3,R3,#0x400
   \   00000068   0x....             LDR.N    R4,??DataTable5_6
   \   0000006A   0x6864             LDR      R4,[R4, #+4]
   \   0000006C   0x6023             STR      R3,[R4, #+0]
   \   0000006E   0xE7D5             B.N      ??FLOAT_SPI_RW_2_2
    106                          
    107             	}
    108              return(temp);           		  		// return read byte
   \                     ??FLOAT_SPI_RW_2_4: (+1)
   \   00000070   0x0008             MOVS     R0,R1
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xBC10             POP      {R4}
   \   00000076   0x4770             BX       LR               ;; return
    109              
    110           
    111          }
    112          /****************************************************************************************************
    113          * Function Name: uchar FLOAT_Singal_SPI(uchar reg,uchar wdata)
    114          * Description  : registers read and write of device.
    115          * Arguments    : commond,wdata
    116          * Return Value : rdata
    117          ****************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    118          uchar FLOAT_Singal_SPI_Read_2(uchar reg)
    119          {
   \                     FLOAT_Singal_SPI_Read_2: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    120          	uchar rdata;
    121          	
    122          	CSN_2_L;                // CSN low, initialize SPI communication...
   \   00000004   0x....             LDR.N    R0,??DataTable5_6
   \   00000006   0x6880             LDR      R0,[R0, #+8]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF030 0x0002      BICS     R0,R0,#0x2
   \   0000000E   0x....             LDR.N    R1,??DataTable5_6
   \   00000010   0x6889             LDR      R1,[R1, #+8]
   \   00000012   0x6008             STR      R0,[R1, #+0]
    123                 
    124                  FLOAT_delay_us(2);
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       FLOAT_delay_us
    125                   
    126                   reg=reg|0x80;//read
   \   0000001A   0xF054 0x0480      ORRS     R4,R4,#0x80
    127          	FLOAT_SPI_RW_2(reg);            // Select register to read from..
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       FLOAT_SPI_RW_2
    128                   asm("nop");
   \   00000026   0xBF00             nop
    129                   asm("nop");
   \   00000028   0xBF00             nop
    130                   asm("nop");
   \   0000002A   0xBF00             nop
    131                   asm("nop");
   \   0000002C   0xBF00             nop
    132                   asm("nop");
   \   0000002E   0xBF00             nop
    133                   asm("nop");
   \   00000030   0xBF00             nop
    134                   asm("nop");
   \   00000032   0xBF00             nop
    135                   asm("nop");
   \   00000034   0xBF00             nop
    136                   asm("nop");
   \   00000036   0xBF00             nop
    137                   asm("nop");
   \   00000038   0xBF00             nop
    138                   asm("nop");
   \   0000003A   0xBF00             nop
    139                   asm("nop");
   \   0000003C   0xBF00             nop
    140                   asm("nop");
   \   0000003E   0xBF00             nop
    141                   asm("nop");
   \   00000040   0xBF00             nop
    142                   asm("nop");
   \   00000042   0xBF00             nop
    143                   asm("nop");
   \   00000044   0xBF00             nop
    144                   asm("nop");
   \   00000046   0xBF00             nop
    145                   asm("nop");
   \   00000048   0xBF00             nop
    146                   asm("nop");
   \   0000004A   0xBF00             nop
    147                   asm("nop");
   \   0000004C   0xBF00             nop
    148                   asm("nop");
   \   0000004E   0xBF00             nop
    149                   
    150          	rdata = FLOAT_SPI_RW_2(NULL);    // ..then read registervalue
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       FLOAT_SPI_RW_2
   \   00000056   0x0004             MOVS     R4,R0
    151                 
    152                  FLOAT_delay_us(1700);
   \   00000058   0xF240 0x60A4      MOVW     R0,#+1700
   \   0000005C   0x.... 0x....      BL       FLOAT_delay_us
    153          	CSN_2_H;                // CSN high, terminate SPI communication
   \   00000060   0x....             LDR.N    R0,??DataTable5_6
   \   00000062   0x6880             LDR      R0,[R0, #+8]
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000006A   0x....             LDR.N    R1,??DataTable5_6
   \   0000006C   0x6889             LDR      R1,[R1, #+8]
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    154          	
    155          	return rdata;        // return register value
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
    156          }
    157          /****************************************************************************************************
    158          * Function Name: void FLOAT_Singal_SPI_Write(uchar reg,uchar wdata)
    159          * Description  : registers read and write of device.
    160          * Arguments    : commond,wdata
    161          * Return Value : rdata
    162          ****************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    163          void FLOAT_Singal_SPI_Write_2(uchar reg,uchar wdata)
    164          {
   \                     FLOAT_Singal_SPI_Write_2: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    165          	
    166          	CSN_2_L;                // CSN low, initialize SPI communication...
   \   00000006   0x....             LDR.N    R0,??DataTable5_6
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000010   0x....             LDR.N    R1,??DataTable5_6
   \   00000012   0x6889             LDR      R1,[R1, #+8]
   \   00000014   0x6008             STR      R0,[R1, #+0]
    167                
    168                  FLOAT_delay_us(2);//2us
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       FLOAT_delay_us
    169                  reg=reg&~0x80;
   \   0000001C   0xF014 0x047F      ANDS     R4,R4,#0x7F
    170          	FLOAT_SPI_RW_2(reg);            // Select register to read from..
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       FLOAT_SPI_RW_2
    171                   asm("nop");
   \   00000028   0xBF00             nop
    172                   asm("nop");
   \   0000002A   0xBF00             nop
    173                   asm("nop");
   \   0000002C   0xBF00             nop
    174                   asm("nop");
   \   0000002E   0xBF00             nop
    175                   asm("nop");
   \   00000030   0xBF00             nop
    176                   asm("nop");
   \   00000032   0xBF00             nop
    177                   asm("nop");
   \   00000034   0xBF00             nop
    178                   asm("nop");
   \   00000036   0xBF00             nop
    179                   asm("nop");
   \   00000038   0xBF00             nop
    180                   asm("nop");
   \   0000003A   0xBF00             nop
    181                   asm("nop");
   \   0000003C   0xBF00             nop
    182                   asm("nop");
   \   0000003E   0xBF00             nop
    183                   asm("nop");
   \   00000040   0xBF00             nop
    184                   asm("nop");
   \   00000042   0xBF00             nop
    185                   asm("nop");
   \   00000044   0xBF00             nop
    186                   asm("nop");
   \   00000046   0xBF00             nop
    187                   asm("nop");
   \   00000048   0xBF00             nop
    188                   asm("nop");
   \   0000004A   0xBF00             nop
    189                   asm("nop");
   \   0000004C   0xBF00             nop
    190                   asm("nop");
   \   0000004E   0xBF00             nop
    191                   asm("nop");
   \   00000050   0xBF00             nop
    192                  
    193          	FLOAT_SPI_RW_2(wdata);    // ..then read registervalue
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       FLOAT_SPI_RW_2
    194                  FLOAT_delay_us(1700);//875us
   \   0000005A   0xF240 0x60A4      MOVW     R0,#+1700
   \   0000005E   0x.... 0x....      BL       FLOAT_delay_us
    195          	CSN_2_H;              // CSN high, terminate SPI communication
   \   00000062   0x....             LDR.N    R0,??DataTable5_6
   \   00000064   0x6880             LDR      R0,[R0, #+8]
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000006C   0x....             LDR.N    R1,??DataTable5_6
   \   0000006E   0x6889             LDR      R1,[R1, #+8]
   \   00000070   0x6008             STR      R0,[R1, #+0]
    196                 
    197          	
    198          }
   \   00000072   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    199          
    200          /****************************************************************************************************
    201          * Function Name: void FLOAT_SPI_Read_Buf(uchar reg, uchar *pBuf, uchar len)
    202          * Description  : read muche registers
    203          * Arguments    : reg,len
    204          * Return Value : *pBuf
    205          ****************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    206          void FLOAT_SPI_Read_Buf_2(uchar reg, uchar *pBuf, uchar len)
    207          {
   \                     FLOAT_SPI_Read_Buf_2: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    208          	uchar spi_rw_i;
    209          	
    210          	CSN_2_L;                   		// Set CSN low, init SPI tranaction
   \   00000006   0x....             LDR.N    R1,??DataTable5_6
   \   00000008   0x6889             LDR      R1,[R1, #+8]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF031 0x0102      BICS     R1,R1,#0x2
   \   00000010   0x....             LDR.N    R2,??DataTable5_6
   \   00000012   0x6892             LDR      R2,[R2, #+8]
   \   00000014   0x6011             STR      R1,[R2, #+0]
    211                 
    212                  reg=reg|0x80;//read
   \   00000016   0xF050 0x0080      ORRS     R0,R0,#0x80
    213          	FLOAT_SPI_RW_2(reg);       		// Select register to write to and read status uchar
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       FLOAT_SPI_RW_2
    214          	
    215          	for(spi_rw_i=0;spi_rw_i<len;spi_rw_i++)
   \   00000020   0x2600             MOVS     R6,#+0
   \   00000022   0xE005             B.N      ??FLOAT_SPI_Read_Buf_2_0
    216                  {  
    217          	pBuf[spi_rw_i] = FLOAT_SPI_RW_2(NULL);    // 
   \                     ??FLOAT_SPI_Read_Buf_2_1: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       FLOAT_SPI_RW_2
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x5530             STRB     R0,[R6, R4]
    218          	 }
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??FLOAT_SPI_Read_Buf_2_0: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x42AE             CMP      R6,R5
   \   00000036   0xD3F5             BCC.N    ??FLOAT_SPI_Read_Buf_2_1
    219          	CSN_2_H;     
   \   00000038   0x....             LDR.N    R0,??DataTable5_6
   \   0000003A   0x6880             LDR      R0,[R0, #+8]
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000042   0x....             LDR.N    R1,??DataTable5_6
   \   00000044   0x6889             LDR      R1,[R1, #+8]
   \   00000046   0x6008             STR      R0,[R1, #+0]
    220                 
    221          
    222          }
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     RPMAX_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     RPMIN_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     RFREQ_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     orgVal_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     proximtyData_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     rpi_max_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     GPIOX

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   FLOAT_SPI_RW_2
      16   FLOAT_SPI_Read_Buf_2
        16   -> FLOAT_SPI_RW_2
       8   FLOAT_Singal_SPI_Read_2
         8   -> FLOAT_SPI_RW_2
         8   -> FLOAT_delay_us
      16   FLOAT_Singal_SPI_Write_2
        16   -> FLOAT_SPI_RW_2
        16   -> FLOAT_delay_us
       8   LDC1000_init_2
         8   -> FLOAT_SPI_Read_Buf_2
         8   -> FLOAT_Singal_SPI_Write_2
      56   filter_2
        56   -> ldc_read_avr_2
      16   ldc_read_avr_2
        16   -> FLOAT_SPI_Read_Buf_2


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
     120  FLOAT_SPI_RW_2
      74  FLOAT_SPI_Read_Buf_2
     118  FLOAT_Singal_SPI_Read_2
     116  FLOAT_Singal_SPI_Write_2
     108  LDC1000_init_2
       1  RFREQ_2
       1  RPMAX_2
       1  RPMIN_2
      78  filter_2
      68  ldc_read_avr_2
      12  orgVal_2
       2  proximtyData_2
       1  rpi_max_2

 
  14 bytes in section .bss
   4 bytes in section .data
 710 bytes in section .text
 
 710 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
