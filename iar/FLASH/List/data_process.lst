###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Jul/2016  19:39:35
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\data_process.c
#    Command line =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\data_process.c
#        -D LPLD_K60 -lCN
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -lB
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\
#        -o
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\app\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\List\data_process.lst
#    Object file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\iar\FLASH\Obj\data_process.o
#
###############################################################################

C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail_A车\app\data_process.c
      1          #include "data_process.h"
      2          #include "LDC1000.h"
      3          

   \                                 In section .bss, align 4
      4          static int offset_l,offset_r,offset_c;
   \                     offset_l:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     offset_r:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     offset_c:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
      5          static uint16 turn;
   \                     turn:
   \   00000000                      DS8 2
      6          
      7          #if 1/*************************数据采集************************/
      8          

   \                                 In section .text, align 2, keep-with-next
      9          void data_input()
     10          {
   \                     data_input: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     11            eleccar.batt_volt = battery_check();
   \   00000002   0x.... 0x....      BL       battery_check
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000000A   0x8108             STRH     R0,[R1, #+8]
     12            
     13            //三路传感器采集
     14            get_LDC_fre(indata.fre);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000010   0x.... 0x....      BL       get_LDC_fre
     15           
     16            offset_l=LF-setpara.Ref.leftmin;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000001E   0x6849             LDR      R1,[R1, #+4]
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000026   0x6008             STR      R0,[R1, #+0]
     17            offset_r=RF-setpara.Ref.rightmin;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000002C   0x6840             LDR      R0,[R0, #+4]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000032   0x68C9             LDR      R1,[R1, #+12]
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     18            offset_c=CF-setpara.Ref.centermin;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000040   0x6880             LDR      R0,[R0, #+8]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000046   0x6949             LDR      R1,[R1, #+20]
   \   00000048   0x1A40             SUBS     R0,R0,R1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     19            
     20            if ((offset_l>=15) && (offset_r<15)) turn=1;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x280F             CMP      R0,#+15
   \   00000058   0xDB09             BLT.N    ??data_input_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x280F             CMP      R0,#+15
   \   00000062   0xDA04             BGE.N    ??data_input_0
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000006A   0x8008             STRH     R0,[R1, #+0]
   \   0000006C   0xE00D             B.N      ??data_input_1
     21              else if ((offset_r>=15) && (offset_l<15)) turn=2;
   \                     ??data_input_0: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x280F             CMP      R0,#+15
   \   00000076   0xDB08             BLT.N    ??data_input_1
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x280F             CMP      R0,#+15
   \   00000080   0xDA03             BGE.N    ??data_input_1
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000088   0x8008             STRH     R0,[R1, #+0]
     22            
     23            //获取FTM1的正交解码计数值（编码器反馈速度）
     24            indata.febspeed = -(int16)LPLD_FTM_GetCounter(FTM1);
   \                     ??data_input_1: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x40039000
   \   0000008E   0x.... 0x....      BL       LPLD_FTM_GetCounter
   \   00000092   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000094   0x4240             RSBS     R0,R0,#+0
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000009A   0x6188             STR      R0,[R1, #+24]
     25            LPLD_FTM_ClearCounter(FTM1);//清空计数器
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x40039000
   \   000000A0   0x.... 0x....      BL       LPLD_FTM_ClearCounter
     26          
     27          }
   \   000000A4   0xBD01             POP      {R0,PC}          ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void get_LDC_fre(int32* fre)
     30          {
   \                     get_LDC_fre: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     31            for(int i=0;i<3;i++)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xE009             B.N      ??get_LDC_fre_0
     32              indata.fre_old[i]=indata.fre[i];
   \                     ??get_LDC_fre_1: (+1)
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000000C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   00000014   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000018   0x60D1             STR      R1,[R2, #+12]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \                     ??get_LDC_fre_0: (+1)
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xDBF3             BLT.N    ??get_LDC_fre_1
     33            
     34            indata.fre[0] = filter_1()/100;
   \   00000020   0x.... 0x....      BL       filter_1
   \   00000024   0x2164             MOVS     R1,#+100
   \   00000026   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     35            indata.fre[1] = filter_2()/100;
   \   00000030   0x.... 0x....      BL       filter_2
   \   00000034   0x2164             MOVS     R1,#+100
   \   00000036   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000003E   0x6048             STR      R0,[R1, #+4]
     36            indata.fre[2] = filter_3()/100;
   \   00000040   0x.... 0x....      BL       filter_3
   \   00000044   0x2164             MOVS     R1,#+100
   \   00000046   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000004E   0x6088             STR      R0,[R1, #+8]
     37            
     38          //限幅滤波,防止突变
     39            for(int j=0;j<3;j++)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xE006             B.N      ??get_LDC_fre_2
     40            {
     41              if((indata.fre[j]-indata.fre_old[j])>A)
     42                fre[j] = indata.fre_old[j]+A;
     43              else if((indata.fre_old[j]-indata.fre[j])>A)
     44                fre[j] = indata.fre_old[j]-A;
     45              else fre[j] = indata.fre[j];
   \                     ??get_LDC_fre_3: (+1)
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000058   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000005C   0xF844 0x1020      STR      R1,[R4, R0, LSL #+2]
   \                     ??get_LDC_fre_4: (+1)
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \                     ??get_LDC_fre_2: (+1)
   \   00000062   0x2803             CMP      R0,#+3
   \   00000064   0xDA29             BGE.N    ??get_LDC_fre_5
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000006A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   00000072   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000076   0x68D2             LDR      R2,[R2, #+12]
   \   00000078   0x1A89             SUBS     R1,R1,R2
   \   0000007A   0x2915             CMP      R1,#+21
   \   0000007C   0xDB08             BLT.N    ??get_LDC_fre_6
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000082   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000086   0x68C9             LDR      R1,[R1, #+12]
   \   00000088   0x3114             ADDS     R1,R1,#+20
   \   0000008A   0xF844 0x1020      STR      R1,[R4, R0, LSL #+2]
   \   0000008E   0xE7E7             B.N      ??get_LDC_fre_4
   \                     ??get_LDC_fre_6: (+1)
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000094   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000098   0x68C9             LDR      R1,[R1, #+12]
   \   0000009A   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   0000009E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000A2   0x1A89             SUBS     R1,R1,R2
   \   000000A4   0x2915             CMP      R1,#+21
   \   000000A6   0xDBD5             BLT.N    ??get_LDC_fre_3
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   000000AC   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000000B0   0x68C9             LDR      R1,[R1, #+12]
   \   000000B2   0x3914             SUBS     R1,R1,#+20
   \   000000B4   0xF844 0x1020      STR      R1,[R4, R0, LSL #+2]
   \   000000B8   0xE7D2             B.N      ??get_LDC_fre_4
     46            }
     47          } 
   \                     ??get_LDC_fre_5: (+1)
   \   000000BA   0xBD10             POP      {R4,PC}          ;; return
     48          
     49          #endif
     50          #if 1/*************************赛道计算************************/

   \                                 In section .text, align 2, keep-with-next
     51          void data_process()
     52          {
   \                     data_process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53            outdata.Track_Pos = Track_Cal(indata.fre);        //小车偏移位置
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000006   0x.... 0x....      BL       Track_Cal
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     54            outdata.Steer_PWM = Steer_PWM_Cal(outdata.Track_Pos);   //舵机期望+整定
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       Steer_PWM_Cal
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   0000001E   0x6048             STR      R0,[R1, #+4]
     55            outdata.Motor_Speed = Speed_Cal(outdata.Track_Pos);     //电机驱动期望值
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       Speed_Cal
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   0000002E   0x6088             STR      R0,[R1, #+8]
     56            outdata.Motor_Power = Motor_PID_Cal(indata.febspeed,outdata.Motor_Speed);   //电机驱动整定值
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000034   0x6881             LDR      R1,[R0, #+8]
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000003A   0x6980             LDR      R0,[R0, #+24]
   \   0000003C   0x.... 0x....      BL       Motor_PID_Cal
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000044   0x60C8             STR      R0,[R1, #+12]
     57          }
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          int Track_Cal(int32* fre)
     60          {
   \                     Track_Cal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     61            if ((offset_l<=10) && (offset_r<=10) && (offset_c<-20))  //判断出界
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x280B             CMP      R0,#+11
   \   0000000A   0xDA0F             BGE.N    ??Track_Cal_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x280B             CMP      R0,#+11
   \   00000014   0xDA0A             BGE.N    ??Track_Cal_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF110 0x0F14      CMN      R0,#+20
   \   00000020   0xDA04             BGE.N    ??Track_Cal_0
     62              status_track=OUT;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0xE041             B.N      ??Track_Cal_1
     63          //  else if ((status_track == OUT) && (offset_c>=-50))  //出弯
     64          //  {
     65          //    status_track = CURVE_OUT;
     66          //    return 0;
     67          //  }
     68            else if ((offset_l>10) && (offset_r>10))   //十字交叉
   \                     ??Track_Cal_0: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x280B             CMP      R0,#+11
   \   00000034   0xDB0A             BLT.N    ??Track_Cal_2
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x280B             CMP      R0,#+11
   \   0000003E   0xDB05             BLT.N    ??Track_Cal_2
     69            {
     70              status_track = CROSS;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000046   0x7008             STRB     R0,[R1, #+0]
     71              return 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xE071             B.N      ??Track_Cal_3
     72            }
     73            else if ( (indata.febspeed>1200) && ( (offset_l>20) || (offset_r>20) ) ) //直道入弯
   \                     ??Track_Cal_2: (+1)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000050   0x6980             LDR      R0,[R0, #+24]
   \   00000052   0xF5B0 0x6F96      CMP      R0,#+1200
   \   00000056   0xDD0E             BLE.N    ??Track_Cal_4
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x2815             CMP      R0,#+21
   \   00000060   0xDA04             BGE.N    ??Track_Cal_5
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x2815             CMP      R0,#+21
   \   0000006A   0xDB04             BLT.N    ??Track_Cal_4
     74              status_track = CURVE_IN;
   \                     ??Track_Cal_5: (+1)
   \   0000006C   0x2005             MOVS     R0,#+5
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000072   0x7008             STRB     R0,[R1, #+0]
   \   00000074   0xE01C             B.N      ??Track_Cal_1
     75            else if ( ( (offset_l<=10) && (offset_r>=20) ) || ( (offset_l>=20) && (offset_r<=10) ) )  //过弯
   \                     ??Track_Cal_4: (+1)
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x280B             CMP      R0,#+11
   \   0000007E   0xDA04             BGE.N    ??Track_Cal_6
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x2814             CMP      R0,#+20
   \   00000088   0xDA09             BGE.N    ??Track_Cal_7
   \                     ??Track_Cal_6: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x2814             CMP      R0,#+20
   \   00000092   0xDB09             BLT.N    ??Track_Cal_8
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x280B             CMP      R0,#+11
   \   0000009C   0xDA04             BGE.N    ??Track_Cal_8
     76              status_track = CURVE_PASS; 
   \                     ??Track_Cal_7: (+1)
   \   0000009E   0x2006             MOVS     R0,#+6
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000000A4   0x7008             STRB     R0,[R1, #+0]
   \   000000A6   0xE003             B.N      ??Track_Cal_1
     77            else status_track = STRAIGHT;
   \                     ??Track_Cal_8: (+1)
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
     78          
     79            track.weight_left = (int)weight_cal(offset_l,setpara.weight_left);
   \                     ??Track_Cal_1: (+1)
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x.... 0x....      BL       weight_cal
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   000000C2   0x6108             STR      R0,[R1, #+16]
     80            track.weight_right = (int)weight_cal(offset_r,setpara.weight_right);
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x.... 0x....      BL       weight_cal
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   000000D6   0x6148             STR      R0,[R1, #+20]
     81            int trackout=(setpara.K_left*track.weight_left*offset_l+setpara.K_right*track.weight_right*offset_r)/1000;
   \   000000D8   0x....             LDR.N    R0,??DataTable7_2
   \   000000DA   0x6B80             LDR      R0,[R0, #+56]
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   000000E0   0x6909             LDR      R1,[R1, #+16]
   \   000000E2   0x4348             MULS     R0,R1,R0
   \   000000E4   0x....             LDR.N    R1,??DataTable7_3
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0x....             LDR.N    R2,??DataTable7_2
   \   000000EA   0x6BD2             LDR      R2,[R2, #+60]
   \   000000EC   0x....             LDR.N    R3,??DataTable7_11
   \   000000EE   0x695B             LDR      R3,[R3, #+20]
   \   000000F0   0x435A             MULS     R2,R3,R2
   \   000000F2   0x....             LDR.N    R3,??DataTable7_4
   \   000000F4   0x681B             LDR      R3,[R3, #+0]
   \   000000F6   0x435A             MULS     R2,R3,R2
   \   000000F8   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000FC   0xF44F 0x717A      MOV      R1,#+1000
   \   00000100   0xFB90 0xF0F1      SDIV     R0,R0,R1
     82            if ((offset_r>=5) && (offset_l<5)) trackout *= -1;
   \   00000104   0x....             LDR.N    R1,??DataTable7_4
   \   00000106   0x6809             LDR      R1,[R1, #+0]
   \   00000108   0x2905             CMP      R1,#+5
   \   0000010A   0xDB06             BLT.N    ??Track_Cal_9
   \   0000010C   0x....             LDR.N    R1,??DataTable7_3
   \   0000010E   0x6809             LDR      R1,[R1, #+0]
   \   00000110   0x2905             CMP      R1,#+5
   \   00000112   0xDA02             BGE.N    ??Track_Cal_9
   \   00000114   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000118   0x4348             MULS     R0,R1,R0
     83          
     84          //  last_status_track= status_track;
     85          //  last_track_pos= trackout;
     86            if (trackout>1000) return 1000;
   \                     ??Track_Cal_9: (+1)
   \   0000011A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000011E   0xDD02             BLE.N    ??Track_Cal_10
   \   00000120   0xF44F 0x707A      MOV      R0,#+1000
   \   00000124   0xE004             B.N      ??Track_Cal_3
     87            else if (trackout<-1000) return -1000;
   \                     ??Track_Cal_10: (+1)
   \   00000126   0xF510 0x7F7A      CMN      R0,#+1000
   \   0000012A   0xDA01             BGE.N    ??Track_Cal_11
   \   0000012C   0x....             LDR.N    R0,??DataTable7_13  ;; 0xfffffc18
   \   0000012E   0xE7FF             B.N      ??Track_Cal_3
     88            else  return trackout;
   \                     ??Track_Cal_11: (+1)
   \                     ??Track_Cal_3: (+1)
   \   00000130   0xBD02             POP      {R1,PC}          ;; return
     89          }
     90          
     91          

   \                                 In section .text, align 2, keep-with-next
     92          int weight_cal(int xvalue,int* setarray)
     93          {
   \                     weight_cal: (+1)
   \   00000000   0xB410             PUSH     {R4}
     94            int segment=xvalue/10;       //分段区域
   \   00000002   0x220A             MOVS     R2,#+10
   \   00000004   0xFB90 0xF2F2      SDIV     R2,R0,R2
     95            int position=xvalue-segment*10;      //区域内位置
   \   00000008   0x230A             MOVS     R3,#+10
   \   0000000A   0xFB03 0x0012      MLS      R0,R3,R2,R0
     96            if(segment<0)
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD501             BPL.N    ??weight_cal_0
     97              return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE012             B.N      ??weight_cal_1
     98            else if(segment>=10)
   \                     ??weight_cal_0: (+1)
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xDB02             BLT.N    ??weight_cal_2
     99              return 1000;
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0xE00D             B.N      ??weight_cal_1
    100            else
    101              return (setarray[segment]*(10-position)+setarray[segment+1]*position)/50;
   \                     ??weight_cal_2: (+1)
   \   00000020   0xF851 0x3022      LDR      R3,[R1, R2, LSL #+2]
   \   00000024   0xF1D0 0x040A      RSBS     R4,R0,#+10
   \   00000028   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   0000002C   0x6849             LDR      R1,[R1, #+4]
   \   0000002E   0xFB00 0xF001      MUL      R0,R0,R1
   \   00000032   0xFB04 0x0003      MLA      R0,R4,R3,R0
   \   00000036   0x2132             MOVS     R1,#+50
   \   00000038   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \                     ??weight_cal_1: (+1)
   \   0000003C   0xBC10             POP      {R4}
   \   0000003E   0x4770             BX       LR               ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          int Steer_PWM_Cal(int track_pos)
    105          {
    106            static int last_track_pos;
    107            int steertemp =( setpara.SteerPD.Kp * track_pos + setpara.SteerPD.Kd*(track_pos-last_track_pos))/100;
   \                     Steer_PWM_Cal: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_2
   \   00000002   0x6D49             LDR      R1,[R1, #+84]
   \   00000004   0x....             LDR.N    R2,??DataTable7_2
   \   00000006   0x6D92             LDR      R2,[R2, #+88]
   \   00000008   0x....             LDR.N    R3,??DataTable7_14
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0x1AC3             SUBS     R3,R0,R3
   \   0000000E   0x435A             MULS     R2,R3,R2
   \   00000010   0xFB00 0x2101      MLA      R1,R0,R1,R2
   \   00000014   0x2264             MOVS     R2,#+100
   \   00000016   0xFB91 0xF1F2      SDIV     R1,R1,R2
    108            int steerout = setpara.Steer.mid+setpara.Steer.maxturn * steertemp/1000;
   \   0000001A   0x....             LDR.N    R2,??DataTable7_2
   \   0000001C   0x6DD2             LDR      R2,[R2, #+92]
   \   0000001E   0x....             LDR.N    R3,??DataTable7_2
   \   00000020   0x6E1B             LDR      R3,[R3, #+96]
   \   00000022   0xFB01 0xF103      MUL      R1,R1,R3
   \   00000026   0xF44F 0x737A      MOV      R3,#+1000
   \   0000002A   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \   0000002E   0x1889             ADDS     R1,R1,R2
    109            last_track_pos = track_pos;
   \   00000030   0x....             LDR.N    R2,??DataTable7_14
   \   00000032   0x6010             STR      R0,[R2, #+0]
    110          
    111          //  if (indata.febspeed>1500) return setpara.Steer.mid;  //先减速再打角
    112            if (status_track==OUT)
   \   00000034   0x....             LDR.N    R0,??DataTable7_9
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD10F             BNE.N    ??Steer_PWM_Cal_0
    113            {
    114              if (turn==1) return (setpara.Steer.mid+setpara.Steer.maxturn);
   \   0000003C   0x....             LDR.N    R0,??DataTable7_6
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x2801             CMP      R0,#+1
   \   00000042   0xD105             BNE.N    ??Steer_PWM_Cal_1
   \   00000044   0x....             LDR.N    R0,??DataTable7_2
   \   00000046   0x6DC0             LDR      R0,[R0, #+92]
   \   00000048   0x....             LDR.N    R1,??DataTable7_2
   \   0000004A   0x6E09             LDR      R1,[R1, #+96]
   \   0000004C   0x1808             ADDS     R0,R1,R0
   \   0000004E   0xE020             B.N      ??Steer_PWM_Cal_2
    115              else return (setpara.Steer.mid-setpara.Steer.maxturn);
   \                     ??Steer_PWM_Cal_1: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable7_2
   \   00000052   0x6DC0             LDR      R0,[R0, #+92]
   \   00000054   0x....             LDR.N    R1,??DataTable7_2
   \   00000056   0x6E09             LDR      R1,[R1, #+96]
   \   00000058   0x1A40             SUBS     R0,R0,R1
   \   0000005A   0xE01A             B.N      ??Steer_PWM_Cal_2
    116            }
    117            
    118            if (steerout<(setpara.Steer.mid-setpara.Steer.maxturn))
   \                     ??Steer_PWM_Cal_0: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable7_2
   \   0000005E   0x6DC0             LDR      R0,[R0, #+92]
   \   00000060   0x....             LDR.N    R2,??DataTable7_2
   \   00000062   0x6E12             LDR      R2,[R2, #+96]
   \   00000064   0x1A80             SUBS     R0,R0,R2
   \   00000066   0x4281             CMP      R1,R0
   \   00000068   0xDA05             BGE.N    ??Steer_PWM_Cal_3
    119              return (setpara.Steer.mid-setpara.Steer.maxturn);
   \   0000006A   0x....             LDR.N    R0,??DataTable7_2
   \   0000006C   0x6DC0             LDR      R0,[R0, #+92]
   \   0000006E   0x....             LDR.N    R1,??DataTable7_2
   \   00000070   0x6E09             LDR      R1,[R1, #+96]
   \   00000072   0x1A40             SUBS     R0,R0,R1
   \   00000074   0xE00D             B.N      ??Steer_PWM_Cal_2
    120            else if (steerout>(setpara.Steer.mid+setpara.Steer.maxturn))
   \                     ??Steer_PWM_Cal_3: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable7_2
   \   00000078   0x6DC0             LDR      R0,[R0, #+92]
   \   0000007A   0x....             LDR.N    R2,??DataTable7_2
   \   0000007C   0x6E12             LDR      R2,[R2, #+96]
   \   0000007E   0x1810             ADDS     R0,R2,R0
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xDA05             BGE.N    ??Steer_PWM_Cal_4
    121              return (setpara.Steer.mid+setpara.Steer.maxturn);
   \   00000084   0x....             LDR.N    R0,??DataTable7_2
   \   00000086   0x6DC0             LDR      R0,[R0, #+92]
   \   00000088   0x....             LDR.N    R1,??DataTable7_2
   \   0000008A   0x6E09             LDR      R1,[R1, #+96]
   \   0000008C   0x1808             ADDS     R0,R1,R0
   \   0000008E   0xE000             B.N      ??Steer_PWM_Cal_2
    122            else
    123              return steerout;
   \                     ??Steer_PWM_Cal_4: (+1)
   \   00000090   0x0008             MOVS     R0,R1
   \                     ??Steer_PWM_Cal_2: (+1)
   \   00000092   0x4770             BX       LR               ;; return
    124          }

   \                                 In section .bss, align 4
   \                     ??last_track_pos:
   \   00000000                      DS8 4
    125          

   \                                 In section .text, align 2, keep-with-next
    126          int Speed_Cal(int track_pos) 
    127          {
   \                     Speed_Cal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    128            int speedout=setpara.SetSpeedMax-abs(track_pos)*(setpara.SetSpeedMax-setpara.SetSpeedMin)/1000;
   \   00000002   0x.... 0x....      BL       abs
   \   00000006   0x....             LDR.N    R1,??DataTable7_2
   \   00000008   0x6B09             LDR      R1,[R1, #+48]
   \   0000000A   0x....             LDR.N    R2,??DataTable7_2
   \   0000000C   0x6B12             LDR      R2,[R2, #+48]
   \   0000000E   0x....             LDR.N    R3,??DataTable7_2
   \   00000010   0x6B5B             LDR      R3,[R3, #+52]
   \   00000012   0x1AD2             SUBS     R2,R2,R3
   \   00000014   0x4350             MULS     R0,R2,R0
   \   00000016   0xF44F 0x727A      MOV      R2,#+1000
   \   0000001A   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000001E   0x1A08             SUBS     R0,R1,R0
    129            if (eleccar.status == 2) return 0;
   \   00000020   0x....             LDR.N    R1,??DataTable7
   \   00000022   0x7809             LDRB     R1,[R1, #+0]
   \   00000024   0x2902             CMP      R1,#+2
   \   00000026   0xD101             BNE.N    ??Speed_Cal_0
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE03D             B.N      ??Speed_Cal_1
    130            
    131            if (status_track == CURVE_IN) return -indata.febspeed*2;
   \                     ??Speed_Cal_0: (+1)
   \   0000002C   0x....             LDR.N    R1,??DataTable7_9
   \   0000002E   0x7809             LDRB     R1,[R1, #+0]
   \   00000030   0x2905             CMP      R1,#+5
   \   00000032   0xD104             BNE.N    ??Speed_Cal_2
   \   00000034   0x....             LDR.N    R0,??DataTable7_1
   \   00000036   0x6980             LDR      R0,[R0, #+24]
   \   00000038   0x4240             RSBS     R0,R0,#+0
   \   0000003A   0x0040             LSLS     R0,R0,#+1
   \   0000003C   0xE034             B.N      ??Speed_Cal_1
    132            else if (status_track == OUT) 
   \                     ??Speed_Cal_2: (+1)
   \   0000003E   0x....             LDR.N    R1,??DataTable7_9
   \   00000040   0x7809             LDRB     R1,[R1, #+0]
   \   00000042   0x2900             CMP      R1,#+0
   \   00000044   0xD129             BNE.N    ??Speed_Cal_3
    133            {
    134              if (indata.febspeed>1200) return -indata.febspeed*2;
   \   00000046   0x....             LDR.N    R0,??DataTable7_1
   \   00000048   0x6980             LDR      R0,[R0, #+24]
   \   0000004A   0xF5B0 0x6F96      CMP      R0,#+1200
   \   0000004E   0xDD04             BLE.N    ??Speed_Cal_4
   \   00000050   0x....             LDR.N    R0,??DataTable7_1
   \   00000052   0x6980             LDR      R0,[R0, #+24]
   \   00000054   0x4240             RSBS     R0,R0,#+0
   \   00000056   0x0040             LSLS     R0,R0,#+1
   \   00000058   0xE026             B.N      ??Speed_Cal_1
    135                else if (indata.febspeed>1000) return setpara.SetSpeedMin*4-indata.febspeed*3;
   \                     ??Speed_Cal_4: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable7_1
   \   0000005C   0x6980             LDR      R0,[R0, #+24]
   \   0000005E   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000062   0xDD08             BLE.N    ??Speed_Cal_5
   \   00000064   0x....             LDR.N    R0,??DataTable7_2
   \   00000066   0x6B40             LDR      R0,[R0, #+52]
   \   00000068   0x0080             LSLS     R0,R0,#+2
   \   0000006A   0x....             LDR.N    R1,??DataTable7_1
   \   0000006C   0x6989             LDR      R1,[R1, #+24]
   \   0000006E   0x2203             MOVS     R2,#+3
   \   00000070   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000074   0xE018             B.N      ??Speed_Cal_1
    136                else if (indata.febspeed>setpara.SetSpeedMin) return setpara.SetSpeedMin*3-indata.febspeed*2;
   \                     ??Speed_Cal_5: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable7_2
   \   00000078   0x6B40             LDR      R0,[R0, #+52]
   \   0000007A   0x....             LDR.N    R1,??DataTable7_1
   \   0000007C   0x6989             LDR      R1,[R1, #+24]
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xDA08             BGE.N    ??Speed_Cal_6
   \   00000082   0x....             LDR.N    R0,??DataTable7_2
   \   00000084   0x6B40             LDR      R0,[R0, #+52]
   \   00000086   0x2103             MOVS     R1,#+3
   \   00000088   0x4348             MULS     R0,R1,R0
   \   0000008A   0x....             LDR.N    R1,??DataTable7_1
   \   0000008C   0x6989             LDR      R1,[R1, #+24]
   \   0000008E   0xEBB0 0x0041      SUBS     R0,R0,R1, LSL #+1
   \   00000092   0xE009             B.N      ??Speed_Cal_1
    137                else return setpara.SetSpeedMin;
   \                     ??Speed_Cal_6: (+1)
   \   00000094   0x....             LDR.N    R0,??DataTable7_2
   \   00000096   0x6B40             LDR      R0,[R0, #+52]
   \   00000098   0xE006             B.N      ??Speed_Cal_1
    138            }
    139            else if (status_track == CURVE_PASS) return setpara.SetSpeedMin;
   \                     ??Speed_Cal_3: (+1)
   \   0000009A   0x....             LDR.N    R1,??DataTable7_9
   \   0000009C   0x7809             LDRB     R1,[R1, #+0]
   \   0000009E   0x2906             CMP      R1,#+6
   \   000000A0   0xD102             BNE.N    ??Speed_Cal_7
   \   000000A2   0x....             LDR.N    R0,??DataTable7_2
   \   000000A4   0x6B40             LDR      R0,[R0, #+52]
   \   000000A6   0xE7FF             B.N      ??Speed_Cal_1
    140            else return speedout;
   \                     ??Speed_Cal_7: (+1)
   \                     ??Speed_Cal_1: (+1)
   \   000000A8   0xBD02             POP      {R1,PC}          ;; return
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          int Motor_PID_Cal(int input_speed,int setspeed)
    144          {
   \                     Motor_PID_Cal: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    145            static int powerout,error,last_error,last_last_error;
    146            error = setspeed - input_speed;
   \   00000002   0x1A08             SUBS     R0,R1,R0
   \   00000004   0x....             LDR.N    R1,??DataTable7_15
   \   00000006   0x6008             STR      R0,[R1, #+0]
    147            int d_error = error-last_error;
   \   00000008   0x....             LDR.N    R0,??DataTable7_15
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable7_16
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x1A40             SUBS     R0,R0,R1
    148            int dd_error = 2*last_error-error-last_last_error;
   \   00000012   0x....             LDR.N    R1,??DataTable7_16
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x....             LDR.N    R2,??DataTable7_15
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0xEBD2 0x0141      RSBS     R1,R2,R1, LSL #+1
   \   0000001E   0x....             LDR.N    R2,??DataTable7_17
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0x1A89             SUBS     R1,R1,R2
    149            powerout += setpara.SpeedPID.Kp * d_error + setpara.SpeedPID.Ki * error + setpara.SpeedPID.Kd * dd_error;     //PID
   \   00000024   0x....             LDR.N    R2,??DataTable7_18
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x....             LDR.N    R3,??DataTable7_2
   \   0000002A   0x699B             LDR      R3,[R3, #+24]
   \   0000002C   0x....             LDR.N    R4,??DataTable7_2
   \   0000002E   0x69E4             LDR      R4,[R4, #+28]
   \   00000030   0x....             LDR.N    R5,??DataTable7_15
   \   00000032   0x682D             LDR      R5,[R5, #+0]
   \   00000034   0x436C             MULS     R4,R5,R4
   \   00000036   0xFB00 0x4003      MLA      R0,R0,R3,R4
   \   0000003A   0x....             LDR.N    R3,??DataTable7_2
   \   0000003C   0x6A1B             LDR      R3,[R3, #+32]
   \   0000003E   0xFB01 0x0003      MLA      R0,R1,R3,R0
   \   00000042   0x1880             ADDS     R0,R0,R2
   \   00000044   0x....             LDR.N    R1,??DataTable7_18
   \   00000046   0x6008             STR      R0,[R1, #+0]
    150            last_last_error = last_error;
   \   00000048   0x....             LDR.N    R0,??DataTable7_16
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x....             LDR.N    R1,??DataTable7_17
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    151            last_error = error;
   \   00000050   0x....             LDR.N    R0,??DataTable7_15
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x....             LDR.N    R1,??DataTable7_16
   \   00000056   0x6008             STR      R0,[R1, #+0]
    152            
    153            if(powerout>setpara.SpeedDutyMax)//||error>setpara.SpeedBANGBANG)
   \   00000058   0x....             LDR.N    R0,??DataTable7_2
   \   0000005A   0x6C00             LDR      R0,[R0, #+64]
   \   0000005C   0x....             LDR.N    R1,??DataTable7_18
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xDA04             BGE.N    ??Motor_PID_Cal_0
    154              powerout=setpara.SpeedDutyMax;
   \   00000064   0x....             LDR.N    R0,??DataTable7_2
   \   00000066   0x6C00             LDR      R0,[R0, #+64]
   \   00000068   0x....             LDR.N    R1,??DataTable7_18
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0xE00A             B.N      ??Motor_PID_Cal_1
    155            else if(powerout<-setpara.SpeedDutyMin)//||(error<-setpara.SpeedBANGBANG))
   \                     ??Motor_PID_Cal_0: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable7_18
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x....             LDR.N    R1,??DataTable7_2
   \   00000074   0x6C49             LDR      R1,[R1, #+68]
   \   00000076   0x42C8             CMN      R0,R1
   \   00000078   0xDA04             BGE.N    ??Motor_PID_Cal_1
    156              powerout=-setpara.SpeedDutyMin;
   \   0000007A   0x....             LDR.N    R0,??DataTable7_2
   \   0000007C   0x6C40             LDR      R0,[R0, #+68]
   \   0000007E   0x4240             RSBS     R0,R0,#+0
   \   00000080   0x....             LDR.N    R1,??DataTable7_18
   \   00000082   0x6008             STR      R0,[R1, #+0]
    157            return powerout;
   \                     ??Motor_PID_Cal_1: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable7_18
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xBC30             POP      {R4,R5}
   \   0000008A   0x4770             BX       LR               ;; return
    158          }

   \                                 In section .bss, align 4
   \                     ??powerout:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??last_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??last_last_error:
   \   00000000                      DS8 4
    159          
    160          
    161          #endif
    162          #if 1/*************************控制输出************************/

   \                                 In section .text, align 2, keep-with-next
    163          void output_Ctrl(uint8 status)
    164          {
   \                     output_Ctrl: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    165            if( ( eleccar.status==1 ) || (eleccar.status == 2))
   \   00000002   0x....             LDR.N    R0,??DataTable7
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD003             BEQ.N    ??output_Ctrl_0
   \   0000000A   0x....             LDR.N    R0,??DataTable7
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD11C             BNE.N    ??output_Ctrl_1
    166            {
    167              if(outdata.Motor_Power>0)
   \                     ??output_Ctrl_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable7_8
   \   00000014   0x68C0             LDR      R0,[R0, #+12]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xDB0B             BLT.N    ??output_Ctrl_2
    168              {
    169                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,outdata.Motor_Power);
   \   0000001A   0x....             LDR.N    R0,??DataTable7_8
   \   0000001C   0x68C2             LDR      R2,[R0, #+12]
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   00000022   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    170                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,0);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2105             MOVS     R1,#+5
   \   0000002A   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   0000002C   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
   \   00000030   0xE016             B.N      ??output_Ctrl_3
    171              }
    172              else
    173              {
    174                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,0);
   \                     ??output_Ctrl_2: (+1)
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2104             MOVS     R1,#+4
   \   00000036   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   00000038   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    175                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,-outdata.Motor_Power);
   \   0000003C   0x....             LDR.N    R0,??DataTable7_8
   \   0000003E   0x68C0             LDR      R0,[R0, #+12]
   \   00000040   0x4242             RSBS     R2,R0,#+0
   \   00000042   0x2105             MOVS     R1,#+5
   \   00000044   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   00000046   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
   \   0000004A   0xE009             B.N      ??output_Ctrl_3
    176              }
    177            }
    178            else
    179            {
    180              LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,0);
   \                     ??output_Ctrl_1: (+1)
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2105             MOVS     R1,#+5
   \   00000050   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   00000052   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    181              LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,0);
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2104             MOVS     R1,#+4
   \   0000005A   0x....             LDR.N    R0,??DataTable7_19  ;; 0x40038000
   \   0000005C   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    182            }
    183            LPLD_FTM_PWM_ChangeDuty(FTM2, FTM_Ch0,outdata.Steer_PWM);
   \                     ??output_Ctrl_3: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable7_8
   \   00000062   0x6842             LDR      R2,[R0, #+4]
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x....             LDR.N    R0,??DataTable7_20  ;; 0x400b8000
   \   00000068   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    184          
    185          }
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     eleccar

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     indata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     setpara

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     offset_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     offset_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     offset_c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     turn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     outdata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     status_track

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     setpara+0x68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     track

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     setpara+0x94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0xFFFFFC18         DC32     0xfffffc18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     ??last_track_pos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     ??error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     ??last_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     ??last_last_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     ??powerout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x400B8000         DC32     0x400b8000
    186          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Motor_PID_Cal
       8   Speed_Cal
         8   -> abs
       0   Steer_PWM_Cal
       8   Track_Cal
         8   -> weight_cal
       8   data_input
         8   -> LPLD_FTM_ClearCounter
         8   -> LPLD_FTM_GetCounter
         8   -> battery_check
         8   -> get_LDC_fre
       8   data_process
         8   -> Motor_PID_Cal
         8   -> Speed_Cal
         8   -> Steer_PWM_Cal
         8   -> Track_Cal
       8   get_LDC_fre
         8   -> filter_1
         8   -> filter_2
         8   -> filter_3
       8   output_Ctrl
         8   -> LPLD_FTM_PWM_ChangeDuty
       4   weight_cal


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     140  Motor_PID_Cal
     170  Speed_Cal
     148  Steer_PWM_Cal
     306  Track_Cal
     166  data_input
      72  data_process
       4  error
     188  get_LDC_fre
       4  last_error
       4  last_last_error
       4  last_track_pos
       4  offset_c
       4  offset_l
       4  offset_r
     110  output_Ctrl
       4  powerout
       2  turn
      64  weight_cal

 
    34 bytes in section .bss
 1 448 bytes in section .text
 
 1 448 bytes of CODE memory
    34 bytes of DATA memory

Errors: none
Warnings: none
