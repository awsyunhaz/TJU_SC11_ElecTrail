###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        10/Apr/2016  21:40:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\app\data_process.c
#    Command line =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\app\data_process.c
#        -D LPLD_K60 -lCN
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\
#        -lB
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\
#        -o
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\app\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\List\data_process.lst
#    Object file  =  
#        C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\iar\RAM\Obj\data_process.o
#
###############################################################################

C:\Users\zyh\Desktop\飞思卡尔\软件组作业一（2015.11.23）\拉普兰德例程及OLED测试程序\project\TJU_SC11_ElecTrail\app\data_process.c
      1          #include "data_process.h"
      2          
      3          
      4          #if 1/*************************数据采集************************/
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void data_input()
      7          {
   \                     data_input: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      8            //两路传感器采集
      9            indata.dma1 = get_frequency(1);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       get_frequency
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     10            indata.dma2 = get_frequency(2);
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       get_frequency
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000018   0x6048             STR      R0,[R1, #+4]
     11            
     12            outdata.div = (indata.dma1-2000)/(indata.dma1+2000);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF5B0 0x60FA      SUBS     R0,R0,#+2000
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0xF511 0x61FA      ADDS     R1,R1,#+2000
   \   0000002E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000036   0x6108             STR      R0,[R1, #+16]
     13          
     14            
     15            
     16          
     17            
     18            
     19            //获取FTM1的正交解码计数值（编码器反馈速度）
     20            indata.febspeed = (int16)LPLD_FTM_GetCounter(FTM1);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40039000
   \   0000003C   0x.... 0x....      BL       LPLD_FTM_GetCounter
   \   00000040   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000046   0x6088             STR      R0,[R1, #+8]
     21            LPLD_FTM_ClearCounter(FTM1);//清空计数器
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40039000
   \   0000004C   0x.... 0x....      BL       LPLD_FTM_ClearCounter
     22            
     23            
     24          }
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
     25          

   \                                 In section .text, align 2, keep-with-next
     26          int get_frequency(uint8 i)
     27          {
     28            if(i==1)
   \                     get_frequency: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD119             BNE.N    ??get_frequency_0
     29            {
     30              static int DMA_CH1_COUNT[2] = {0x7FFF,0x7FFF};
     31              DMA_CH1_COUNT[0] = DMA0->TCD[DMA_CH1].CITER_ELINKNO;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0x40009036
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000012   0x6008             STR      R0,[R1, #+0]
     32              int speed_temp = DMA_CH1_COUNT[1]-DMA_CH1_COUNT[0];
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x1A40             SUBS     R0,R0,R1
     33              if(speed_temp<0)speed_temp += 0x7FFF;
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD502             BPL.N    ??get_frequency_1
   \   00000026   0xF500 0x40FE      ADD      R0,R0,#+32512
   \   0000002A   0x30FF             ADDS     R0,R0,#+255
     34              DMA_CH1_COUNT[1]=DMA_CH1_COUNT[0];
   \                     ??get_frequency_1: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable7_4
   \   00000036   0x6051             STR      R1,[R2, #+4]
     35              return speed_temp;
   \   00000038   0xE01D             B.N      ??get_frequency_2
     36            }
     37            else if(i==2)
   \                     ??get_frequency_0: (+1)
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD119             BNE.N    ??get_frequency_3
     38            {
     39              static int DMA_CH2_COUNT[2] = {0x7FFF,0x7FFF};
     40              DMA_CH2_COUNT[0] = DMA0->TCD[DMA_CH2].CITER_ELINKNO;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable7_5  ;; 0x40009056
   \   00000044   0x8800             LDRH     R0,[R0, #+0]
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     41              int speed_temp = DMA_CH2_COUNT[1]-DMA_CH2_COUNT[0];
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable7_6
   \   00000052   0x6840             LDR      R0,[R0, #+4]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
     42              if(speed_temp<0)speed_temp += 0x7FFF;
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD502             BPL.N    ??get_frequency_4
   \   00000060   0xF500 0x40FE      ADD      R0,R0,#+32512
   \   00000064   0x30FF             ADDS     R0,R0,#+255
     43              DMA_CH2_COUNT[1]=DMA_CH2_COUNT[0];
   \                     ??get_frequency_4: (+1)
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \   00000070   0x6051             STR      R1,[R2, #+4]
     44              return speed_temp;
   \   00000072   0xE000             B.N      ??get_frequency_2
     45            }
     46              else
     47              return 0;
   \                     ??get_frequency_3: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??get_frequency_2: (+1)
   \   00000076   0x4770             BX       LR               ;; return
     48          }

   \                                 In section .data, align 4
   \                     ??DMA_CH1_COUNT:
   \   00000000   0x00007FFF         DC32 32767, 32767
   \              0x00007FFF   

   \                                 In section .data, align 4
   \                     ??DMA_CH2_COUNT:
   \   00000000   0x00007FFF         DC32 32767, 32767
   \              0x00007FFF   
     49          
     50          #endif
     51          #if 1/*************************赛道计算************************/

   \                                 In section .text, align 2, keep-with-next
     52          void data_process()
     53          {
   \                     data_process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     54          //  outdata.Track_Pos = Track_Cal(indata.dma);
     55            outdata.Steer_PWM = Steer_PWM_Cal(outdata.Track_Pos);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       Steer_PWM_Cal
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000010   0x6048             STR      R0,[R1, #+4]
     56            outdata.Motor_Speed = Speed_Cal(outdata.Track_Pos);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       Speed_Cal
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000020   0x6088             STR      R0,[R1, #+8]
     57            outdata.Motor_Power = Motor_PID_Cal(indata.febspeed,outdata.Motor_Speed);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000026   0x6881             LDR      R1,[R0, #+8]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       Motor_PID_Cal
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000036   0x60C8             STR      R0,[R1, #+12]
     58          }
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          int Track_Cal(uint32* dma)
     61          {
   \                     Track_Cal: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     62            if(track.lockdir)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \   00000006   0x6900             LDR      R0,[R0, #+16]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD015             BEQ.N    ??Track_Cal_0
     63            {
     64              if(LF+RF>setpara.lose_threshold*12/10)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000010   0x6B00             LDR      R0,[R0, #+48]
   \   00000012   0x210C             MOVS     R1,#+12
   \   00000014   0x4348             MULS     R0,R1,R0
   \   00000016   0x210A             MOVS     R1,#+10
   \   00000018   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000026   0x6852             LDR      R2,[R2, #+4]
   \   00000028   0x1851             ADDS     R1,R2,R1
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD21B             BCS.N    ??Track_Cal_1
     65                track.lockdir=0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000034   0x6108             STR      R0,[R1, #+16]
   \   00000036   0xE016             B.N      ??Track_Cal_1
     66            }
     67            else
     68            {
     69              if(LF+RF<setpara.lose_threshold) 
   \                     ??Track_Cal_0: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable7
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x....             LDR.N    R1,??DataTable7
   \   0000003E   0x6849             LDR      R1,[R1, #+4]
   \   00000040   0x1808             ADDS     R0,R1,R0
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000046   0x6B09             LDR      R1,[R1, #+48]
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD20C             BCS.N    ??Track_Cal_1
     70                track.lockdir=(LF>RF?1:2);
   \   0000004C   0x....             LDR.N    R0,??DataTable7
   \   0000004E   0x6840             LDR      R0,[R0, #+4]
   \   00000050   0x....             LDR.N    R1,??DataTable7
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD203             BCS.N    ??Track_Cal_2
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x....             LDR.N    R1,??DataTable7_7
   \   0000005C   0x6108             STR      R0,[R1, #+16]
   \   0000005E   0xE002             B.N      ??Track_Cal_1
   \                     ??Track_Cal_2: (+1)
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x....             LDR.N    R1,??DataTable7_7
   \   00000064   0x6108             STR      R0,[R1, #+16]
     71            }
     72            
     73            track.weight_near=weight_cal(LF+RF,setpara.weight_near);
   \                     ??Track_Cal_1: (+1)
   \   00000066   0x....             LDR.N    R1,??DataTable7_9
   \   00000068   0x....             LDR.N    R0,??DataTable7
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x....             LDR.N    R2,??DataTable7
   \   0000006E   0x6852             LDR      R2,[R2, #+4]
   \   00000070   0x1810             ADDS     R0,R2,R0
   \   00000072   0x.... 0x....      BL       weight_cal
   \   00000076   0x....             LDR.N    R1,??DataTable7_7
   \   00000078   0x6188             STR      R0,[R1, #+24]
     74            track.near_cal = 1000*(LF-RF)/(LF+RF+1);      //强行换到-1000：1000
   \   0000007A   0x....             LDR.N    R0,??DataTable7
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x....             LDR.N    R1,??DataTable7
   \   00000080   0x6849             LDR      R1,[R1, #+4]
   \   00000082   0x1A40             SUBS     R0,R0,R1
   \   00000084   0xF44F 0x717A      MOV      R1,#+1000
   \   00000088   0x4348             MULS     R0,R1,R0
   \   0000008A   0x....             LDR.N    R1,??DataTable7
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x....             LDR.N    R2,??DataTable7
   \   00000090   0x6852             LDR      R2,[R2, #+4]
   \   00000092   0x1851             ADDS     R1,R2,R1
   \   00000094   0x1C49             ADDS     R1,R1,#+1
   \   00000096   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000009A   0x....             LDR.N    R1,??DataTable7_7
   \   0000009C   0x6148             STR      R0,[R1, #+20]
     75            track.near_out = (int)(1.0 * setpara.K_near * track.near_cal * track.weight_near /100000000); //权*融合*K
   \   0000009E   0x....             LDR.N    R0,??DataTable7_8
   \   000000A0   0x6B40             LDR      R0,[R0, #+52]
   \   000000A2   0x.... 0x....      BL       __aeabi_i2d
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x....             LDR.N    R3,??DataTable7_10  ;; 0x3ff00000
   \   000000AA   0x.... 0x....      BL       __aeabi_dmul
   \   000000AE   0x0004             MOVS     R4,R0
   \   000000B0   0x000D             MOVS     R5,R1
   \   000000B2   0x....             LDR.N    R0,??DataTable7_7
   \   000000B4   0x6940             LDR      R0,[R0, #+20]
   \   000000B6   0x.... 0x....      BL       __aeabi_ui2d
   \   000000BA   0x0022             MOVS     R2,R4
   \   000000BC   0x002B             MOVS     R3,R5
   \   000000BE   0x.... 0x....      BL       __aeabi_dmul
   \   000000C2   0x0004             MOVS     R4,R0
   \   000000C4   0x000D             MOVS     R5,R1
   \   000000C6   0x....             LDR.N    R0,??DataTable7_7
   \   000000C8   0x6980             LDR      R0,[R0, #+24]
   \   000000CA   0x.... 0x....      BL       __aeabi_ui2d
   \   000000CE   0x0022             MOVS     R2,R4
   \   000000D0   0x002B             MOVS     R3,R5
   \   000000D2   0x.... 0x....      BL       __aeabi_dmul
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x....             LDR.N    R3,??DataTable7_11  ;; 0x4197d784
   \   000000DA   0x.... 0x....      BL       __aeabi_ddiv
   \   000000DE   0x.... 0x....      BL       __aeabi_d2iz
   \   000000E2   0x....             LDR.N    R1,??DataTable7_7
   \   000000E4   0x61C8             STR      R0,[R1, #+28]
     76            track.weight_far=weight_cal(LF+RF,setpara.weight_far);
   \   000000E6   0x....             LDR.N    R1,??DataTable7_12
   \   000000E8   0x....             LDR.N    R0,??DataTable7
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x....             LDR.N    R2,??DataTable7
   \   000000EE   0x6852             LDR      R2,[R2, #+4]
   \   000000F0   0x1810             ADDS     R0,R2,R0
   \   000000F2   0x.... 0x....      BL       weight_cal
   \   000000F6   0x....             LDR.N    R1,??DataTable7_7
   \   000000F8   0x6208             STR      R0,[R1, #+32]
     77            track.far_cal = weight_cal(LF+RF,setpara.cal_far);
   \   000000FA   0x....             LDR.N    R1,??DataTable7_13
   \   000000FC   0x....             LDR.N    R0,??DataTable7
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x....             LDR.N    R2,??DataTable7
   \   00000102   0x6852             LDR      R2,[R2, #+4]
   \   00000104   0x1810             ADDS     R0,R2,R0
   \   00000106   0x.... 0x....      BL       weight_cal
   \   0000010A   0x....             LDR.N    R1,??DataTable7_7
   \   0000010C   0x6248             STR      R0,[R1, #+36]
     78            track.far_out = (int)(1.0 * setpara.K_far * track.far_cal * track.weight_far / 100000000);    //权*
   \   0000010E   0x....             LDR.N    R0,??DataTable7_8
   \   00000110   0x6B80             LDR      R0,[R0, #+56]
   \   00000112   0x.... 0x....      BL       __aeabi_i2d
   \   00000116   0x2200             MOVS     R2,#+0
   \   00000118   0x....             LDR.N    R3,??DataTable7_10  ;; 0x3ff00000
   \   0000011A   0x.... 0x....      BL       __aeabi_dmul
   \   0000011E   0x0004             MOVS     R4,R0
   \   00000120   0x000D             MOVS     R5,R1
   \   00000122   0x....             LDR.N    R0,??DataTable7_7
   \   00000124   0x6A40             LDR      R0,[R0, #+36]
   \   00000126   0x.... 0x....      BL       __aeabi_ui2d
   \   0000012A   0x0022             MOVS     R2,R4
   \   0000012C   0x002B             MOVS     R3,R5
   \   0000012E   0x.... 0x....      BL       __aeabi_dmul
   \   00000132   0x0004             MOVS     R4,R0
   \   00000134   0x000D             MOVS     R5,R1
   \   00000136   0x....             LDR.N    R0,??DataTable7_7
   \   00000138   0x6A00             LDR      R0,[R0, #+32]
   \   0000013A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000013E   0x0022             MOVS     R2,R4
   \   00000140   0x002B             MOVS     R3,R5
   \   00000142   0x.... 0x....      BL       __aeabi_dmul
   \   00000146   0x2200             MOVS     R2,#+0
   \   00000148   0x....             LDR.N    R3,??DataTable7_11  ;; 0x4197d784
   \   0000014A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000014E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000152   0x....             LDR.N    R1,??DataTable7_7
   \   00000154   0x6288             STR      R0,[R1, #+40]
     79            
     80            if(track.lockdir==0)
   \   00000156   0x....             LDR.N    R0,??DataTable7_7
   \   00000158   0x6900             LDR      R0,[R0, #+16]
   \   0000015A   0x2800             CMP      R0,#+0
   \   0000015C   0xD10D             BNE.N    ??Track_Cal_3
     81            {
     82              track.far_out *= sgn(RF-LF);//符号函数
   \   0000015E   0x....             LDR.N    R0,??DataTable7
   \   00000160   0x6840             LDR      R0,[R0, #+4]
   \   00000162   0x....             LDR.N    R1,??DataTable7
   \   00000164   0x6809             LDR      R1,[R1, #+0]
   \   00000166   0x1A40             SUBS     R0,R0,R1
   \   00000168   0x.... 0x....      BL       sgn
   \   0000016C   0x....             LDR.N    R1,??DataTable7_7
   \   0000016E   0x6A89             LDR      R1,[R1, #+40]
   \   00000170   0xFB00 0xF001      MUL      R0,R0,R1
   \   00000174   0x....             LDR.N    R1,??DataTable7_7
   \   00000176   0x6288             STR      R0,[R1, #+40]
   \   00000178   0xE00A             B.N      ??Track_Cal_4
     83            }
     84            else if(track.lockdir==1)    
   \                     ??Track_Cal_3: (+1)
   \   0000017A   0x....             LDR.N    R0,??DataTable7_7
   \   0000017C   0x6900             LDR      R0,[R0, #+16]
   \   0000017E   0x2801             CMP      R0,#+1
   \   00000180   0xD106             BNE.N    ??Track_Cal_4
     85              track.far_out *= -1; 
   \   00000182   0x....             LDR.N    R0,??DataTable7_7
   \   00000184   0x6A80             LDR      R0,[R0, #+40]
   \   00000186   0xF05F 0x31FF      MOVS     R1,#-1
   \   0000018A   0x4348             MULS     R0,R1,R0
   \   0000018C   0x....             LDR.N    R1,??DataTable7_7
   \   0000018E   0x6288             STR      R0,[R1, #+40]
     86            
     87            int allout = track.near_out+track.far_out;
   \                     ??Track_Cal_4: (+1)
   \   00000190   0x....             LDR.N    R0,??DataTable7_7
   \   00000192   0x69C0             LDR      R0,[R0, #+28]
   \   00000194   0x....             LDR.N    R1,??DataTable7_7
   \   00000196   0x6A89             LDR      R1,[R1, #+40]
   \   00000198   0x1808             ADDS     R0,R1,R0
     88            if(allout>1000)
   \   0000019A   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000019E   0xDD02             BLE.N    ??Track_Cal_5
     89              return 1000;
   \   000001A0   0xF44F 0x707A      MOV      R0,#+1000
   \   000001A4   0xE004             B.N      ??Track_Cal_6
     90            else if(allout<-1000)
   \                     ??Track_Cal_5: (+1)
   \   000001A6   0xF510 0x7F7A      CMN      R0,#+1000
   \   000001AA   0xDA01             BGE.N    ??Track_Cal_7
     91              return -1000;
   \   000001AC   0x....             LDR.N    R0,??DataTable7_14  ;; 0xfffffc18
   \   000001AE   0xE7FF             B.N      ??Track_Cal_6
     92            else
     93              return allout;
   \                     ??Track_Cal_7: (+1)
   \                     ??Track_Cal_6: (+1)
   \   000001B0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          int weight_cal(int xvalue,int* setarray)
     97          {
   \                     weight_cal: (+1)
   \   00000000   0xB410             PUSH     {R4}
     98            int segment=xvalue/100;       //分段区域
   \   00000002   0x2264             MOVS     R2,#+100
   \   00000004   0xFB90 0xF2F2      SDIV     R2,R0,R2
     99            int position=xvalue-segment*100;      //区域内位置
   \   00000008   0x2364             MOVS     R3,#+100
   \   0000000A   0xFB03 0x0012      MLS      R0,R3,R2,R0
    100            if(segment<0)
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD501             BPL.N    ??weight_cal_0
    101              return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE012             B.N      ??weight_cal_1
    102            else if(segment>=10)
   \                     ??weight_cal_0: (+1)
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xDB02             BLT.N    ??weight_cal_2
    103              return 1000;
   \   0000001A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001E   0xE00D             B.N      ??weight_cal_1
    104            else
    105              return (setarray[segment]*(100-position)+setarray[segment+1]*position)/100;
   \                     ??weight_cal_2: (+1)
   \   00000020   0xF851 0x3022      LDR      R3,[R1, R2, LSL #+2]
   \   00000024   0xF1D0 0x0464      RSBS     R4,R0,#+100
   \   00000028   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   0000002C   0x6849             LDR      R1,[R1, #+4]
   \   0000002E   0xFB00 0xF001      MUL      R0,R0,R1
   \   00000032   0xFB04 0x0003      MLA      R0,R4,R3,R0
   \   00000036   0x2164             MOVS     R1,#+100
   \   00000038   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \                     ??weight_cal_1: (+1)
   \   0000003C   0xBC10             POP      {R4}
   \   0000003E   0x4770             BX       LR               ;; return
    106          }
    107          

   \                                 In section .text, align 2, keep-with-next
    108          int Steer_PWM_Cal(int track_pos)
    109          {
    110            static int last_track_pos;
    111            int steertemp =( setpara.SteerPD.Kp * track_pos + setpara.SteerPD.Kd*(track_pos-last_track_pos))/100;
   \                     Steer_PWM_Cal: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7_8
   \   00000002   0x6A09             LDR      R1,[R1, #+32]
   \   00000004   0x....             LDR.N    R2,??DataTable7_8
   \   00000006   0x6A52             LDR      R2,[R2, #+36]
   \   00000008   0x....             LDR.N    R3,??DataTable7_15
   \   0000000A   0x681B             LDR      R3,[R3, #+0]
   \   0000000C   0x1AC3             SUBS     R3,R0,R3
   \   0000000E   0x435A             MULS     R2,R3,R2
   \   00000010   0xFB00 0x2101      MLA      R1,R0,R1,R2
   \   00000014   0x2264             MOVS     R2,#+100
   \   00000016   0xFB91 0xF1F2      SDIV     R1,R1,R2
    112            last_track_pos = track_pos;
   \   0000001A   0x....             LDR.N    R2,??DataTable7_15
   \   0000001C   0x6010             STR      R0,[R2, #+0]
    113            return setpara.Steer.mid+setpara.Steer.maxturn * steertemp/1000;
   \   0000001E   0x....             LDR.N    R0,??DataTable7_8
   \   00000020   0x6A80             LDR      R0,[R0, #+40]
   \   00000022   0x....             LDR.N    R2,??DataTable7_8
   \   00000024   0x6AD2             LDR      R2,[R2, #+44]
   \   00000026   0xFB01 0xF102      MUL      R1,R1,R2
   \   0000002A   0xF44F 0x727A      MOV      R2,#+1000
   \   0000002E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000032   0x1808             ADDS     R0,R1,R0
   \   00000034   0x4770             BX       LR               ;; return
    114          }

   \                                 In section .bss, align 4
   \                     ??last_track_pos:
   \   00000000                      DS8 4
    115          

   \                                 In section .text, align 2, keep-with-next
    116          int Speed_Cal(int track_pos)   //abs（）求绝对值
    117          {
   \                     Speed_Cal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    118            return setpara.SetSpeedMax-abs(track_pos)*(setpara.SetSpeedMax-setpara.SetSpeedMin)/1000;
   \   00000002   0x.... 0x....      BL       abs
   \   00000006   0x....             LDR.N    R1,??DataTable7_8
   \   00000008   0x6909             LDR      R1,[R1, #+16]
   \   0000000A   0x....             LDR.N    R2,??DataTable7_8
   \   0000000C   0x6912             LDR      R2,[R2, #+16]
   \   0000000E   0x....             LDR.N    R3,??DataTable7_8
   \   00000010   0x695B             LDR      R3,[R3, #+20]
   \   00000012   0x1AD2             SUBS     R2,R2,R3
   \   00000014   0x4350             MULS     R0,R2,R0
   \   00000016   0xF44F 0x727A      MOV      R2,#+1000
   \   0000001A   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   0000001E   0x1A08             SUBS     R0,R1,R0
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
    119          }
    120          

   \                                 In section .text, align 2, keep-with-next
    121          int Motor_PID_Cal(int input_speed,int setspeed)
    122          {
   \                     Motor_PID_Cal: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    123            static int powerout,error,last_error,last_last_error;
    124            error = setspeed - input_speed;
   \   00000002   0x1A08             SUBS     R0,R1,R0
   \   00000004   0x....             LDR.N    R1,??DataTable7_16
   \   00000006   0x6008             STR      R0,[R1, #+0]
    125            int d_error = error-last_error;
   \   00000008   0x....             LDR.N    R0,??DataTable7_16
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable7_17
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x1A40             SUBS     R0,R0,R1
    126            int dd_error = 2*last_error-error-last_last_error;
   \   00000012   0x....             LDR.N    R1,??DataTable7_17
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x....             LDR.N    R2,??DataTable7_16
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0xEBD2 0x0141      RSBS     R1,R2,R1, LSL #+1
   \   0000001E   0x....             LDR.N    R2,??DataTable7_18
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0x1A89             SUBS     R1,R1,R2
    127            powerout += setpara.SpeedPID.Kp * d_error + setpara.SpeedPID.Ki * error + setpara.SpeedPID.Kd * dd_error;
   \   00000024   0x....             LDR.N    R2,??DataTable7_19
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x....             LDR.N    R3,??DataTable7_8
   \   0000002A   0x681B             LDR      R3,[R3, #+0]
   \   0000002C   0x....             LDR.N    R4,??DataTable7_8
   \   0000002E   0x6864             LDR      R4,[R4, #+4]
   \   00000030   0x....             LDR.N    R5,??DataTable7_16
   \   00000032   0x682D             LDR      R5,[R5, #+0]
   \   00000034   0x436C             MULS     R4,R5,R4
   \   00000036   0xFB00 0x4003      MLA      R0,R0,R3,R4
   \   0000003A   0x....             LDR.N    R3,??DataTable7_8
   \   0000003C   0x689B             LDR      R3,[R3, #+8]
   \   0000003E   0xFB01 0x0003      MLA      R0,R1,R3,R0
   \   00000042   0x1880             ADDS     R0,R0,R2
   \   00000044   0x....             LDR.N    R1,??DataTable7_19
   \   00000046   0x6008             STR      R0,[R1, #+0]
    128            
    129            if(powerout>_MAXPWM||error>setpara.SpeedBANGBANG)
   \   00000048   0x....             LDR.N    R0,??DataTable7_19
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF241 0x3189      MOVW     R1,#+5001
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xDA05             BGE.N    ??Motor_PID_Cal_0
   \   00000054   0x....             LDR.N    R0,??DataTable7_8
   \   00000056   0x68C0             LDR      R0,[R0, #+12]
   \   00000058   0x....             LDR.N    R1,??DataTable7_16
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xDA04             BGE.N    ??Motor_PID_Cal_1
    130              powerout=_MAXPWM;
   \                     ??Motor_PID_Cal_0: (+1)
   \   00000060   0xF241 0x3088      MOVW     R0,#+5000
   \   00000064   0x....             LDR.N    R1,??DataTable7_19
   \   00000066   0x6008             STR      R0,[R1, #+0]
   \   00000068   0xE00D             B.N      ??Motor_PID_Cal_2
    131            else if(powerout<-_MAXPWM||error<-setpara.SpeedBANGBANG)
   \                     ??Motor_PID_Cal_1: (+1)
   \   0000006A   0x....             LDR.N    R0,??DataTable7_19
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR.N    R1,??DataTable7_20  ;; 0xffffec78
   \   00000070   0x4288             CMP      R0,R1
   \   00000072   0xDB05             BLT.N    ??Motor_PID_Cal_3
   \   00000074   0x....             LDR.N    R0,??DataTable7_16
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x....             LDR.N    R1,??DataTable7_8
   \   0000007A   0x68C9             LDR      R1,[R1, #+12]
   \   0000007C   0x42C8             CMN      R0,R1
   \   0000007E   0xDA02             BGE.N    ??Motor_PID_Cal_2
    132              powerout=-_MAXPWM;
   \                     ??Motor_PID_Cal_3: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable7_20  ;; 0xffffec78
   \   00000082   0x....             LDR.N    R1,??DataTable7_19
   \   00000084   0x6008             STR      R0,[R1, #+0]
    133            return powerout;
   \                     ??Motor_PID_Cal_2: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable7_19
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0xBC30             POP      {R4,R5}
   \   0000008C   0x4770             BX       LR               ;; return
    134          }

   \                                 In section .bss, align 4
   \                     ??powerout:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??last_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??last_last_error:
   \   00000000                      DS8 4
    135          
    136          
    137          #endif
    138          #if 1/*************************控制输出************************/

   \                                 In section .text, align 2, keep-with-next
    139          void output_Ctrl(uint8 status)
    140          {
   \                     output_Ctrl: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    141            if(status>0)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD01C             BEQ.N    ??output_Ctrl_0
    142            {
    143              if(outdata.Motor_Power>0)
   \   00000008   0x....             LDR.N    R0,??DataTable7_1
   \   0000000A   0x68C0             LDR      R0,[R0, #+12]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xDB0B             BLT.N    ??output_Ctrl_1
    144              {
    145                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,outdata.Motor_Power);
   \   00000010   0x....             LDR.N    R0,??DataTable7_1
   \   00000012   0x68C2             LDR      R2,[R0, #+12]
   \   00000014   0x2105             MOVS     R1,#+5
   \   00000016   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   00000018   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    146                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,0);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   00000022   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
   \   00000026   0xE016             B.N      ??output_Ctrl_2
    147              }
    148              else
    149              {
    150                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,0);
   \                     ??output_Ctrl_1: (+1)
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2105             MOVS     R1,#+5
   \   0000002C   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   0000002E   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    151                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,-outdata.Motor_Power);
   \   00000032   0x....             LDR.N    R0,??DataTable7_1
   \   00000034   0x68C0             LDR      R0,[R0, #+12]
   \   00000036   0x4242             RSBS     R2,R0,#+0
   \   00000038   0x2104             MOVS     R1,#+4
   \   0000003A   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   0000003C   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
   \   00000040   0xE009             B.N      ??output_Ctrl_2
    152              }
    153            }
    154            else
    155            {
    156              LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch5,0);
   \                     ??output_Ctrl_0: (+1)
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0x2105             MOVS     R1,#+5
   \   00000046   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   00000048   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    157              LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4,0);
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x....             LDR.N    R0,??DataTable7_21  ;; 0x40038000
   \   00000052   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    158            }
    159            LPLD_FTM_PWM_ChangeDuty(FTM2, FTM_Ch0,outdata.Steer_PWM);
   \                     ??output_Ctrl_2: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable7_1
   \   00000058   0x6842             LDR      R2,[R0, #+4]
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x....             LDR.N    R0,??DataTable7_22  ;; 0x400b8000
   \   0000005E   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    160          
    161          }
   \   00000062   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     indata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     outdata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40009036         DC32     0x40009036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ??DMA_CH1_COUNT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40009056         DC32     0x40009056

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ??DMA_CH2_COUNT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     track

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     setpara

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     setpara+0x3C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x4197D784         DC32     0x4197d784

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     setpara+0x68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     setpara+0x94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0xFFFFFC18         DC32     0xfffffc18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     ??last_track_pos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     ??error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     ??last_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     ??last_last_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     ??powerout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0xFFFFEC78         DC32     0xffffec78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x400B8000         DC32     0x400b8000
    162          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Motor_PID_Cal
       8   Speed_Cal
         8   -> abs
       0   Steer_PWM_Cal
      16   Track_Cal
        16   -> __aeabi_d2iz
        16   -> __aeabi_ddiv
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d
        16   -> __aeabi_ui2d
        16   -> sgn
        16   -> weight_cal
       8   data_input
         8   -> LPLD_FTM_ClearCounter
         8   -> LPLD_FTM_GetCounter
         8   -> get_frequency
       8   data_process
         8   -> Motor_PID_Cal
         8   -> Speed_Cal
         8   -> Steer_PWM_Cal
       0   get_frequency
       8   output_Ctrl
         8   -> LPLD_FTM_PWM_ChangeDuty
       4   weight_cal


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  DMA_CH1_COUNT
       8  DMA_CH2_COUNT
     142  Motor_PID_Cal
      34  Speed_Cal
      54  Steer_PWM_Cal
     434  Track_Cal
      82  data_input
      58  data_process
       4  error
     120  get_frequency
       4  last_error
       4  last_last_error
       4  last_track_pos
     100  output_Ctrl
       4  powerout
      64  weight_cal

 
    20 bytes in section .bss
    16 bytes in section .data
 1 180 bytes in section .text
 
 1 180 bytes of CODE memory
    36 bytes of DATA memory

Errors: none
Warnings: none
